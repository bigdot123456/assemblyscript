{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__15__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","FILESPACE_PREFIX","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","Array","emitDiagnostic","info","warning","error","common_1","tokenizer_1","Token","Range","NodeKind","nodeIsConstantValue","kind","LITERAL","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","CALL","ELEMENTACCESS","PROPERTYACCESS","nodeIsGenericCallable","Node","parent","flags","NONE","is","flag","isAny","set","createType","typeArguments","isNullable","type","TypeNode","setParent","createOmittedType","createIdentifierExpression","createTypeParameter","extendsType","elem","TypeParameterNode","createParameter","initializer","ParameterNode","parameterKind","createSignature","parameters","returnType","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","arguments","decoratorKind","decoratorNameToKind","createComment","node","CommentNode","commentKind","expr","IdentifierExpression","createEmptyIdentifierExpression","createArrayLiteralExpression","elements","ArrayLiteralExpression","elementExpressions","nodes","k","setParentIfNotNull","createAssertionExpression","assertionKind","expression","toType","AssertionExpression","createBinaryExpression","operator","left","right","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","declaration","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","element","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","ARROW","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","names","values","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","condition","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","statements","BlockStatement","createBreakStatement","label","BreakStatement","createClassDeclaration","identifier","typeParameters","implementsTypes","members","decorators","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","statement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","path","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","createExportImportStatement","externalName","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","ifTrue","ifFalse","IfStatement","createImportStatement","decls","ImportStatement","declarations","namespaceName","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","createFunctionDeclaration","signature","body","FunctionDeclaration","createMethodDeclaration","MethodDeclaration","createNamespaceDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","createTypeDeclaration","alias","TypeDeclaration","createVariableStatement","VariableStatement","createVariableDeclaration","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","_super","__extends","_this","apply","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","DecoratorKind","SIGNATURE","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","OPERATOR","SEALED","UNMANAGED","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralKind","LiteralExpression","literalKind","ARRAY","AssertionKind","ASSERTION","BINARY","CLASS","COMMA","CONSTRUCTOR","FLOAT","FUNCTION","INSTANCEOF","INTEGER","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","isLastStatement","BLOCK","FUNCTIONDECLARATION","METHODDECLARATION","SourceKind","Statement","Source","SOURCE","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","LIBRARY","DeclarationStatement","cachedProgramLevelInternalName","cachedFileLevelInternalName","mangleInternalName","VARIABLE","NAMESPACEDECLARATION","EXPORT","isTopLevelExport","CLASSDECLARATION","STATIC","needsExplicitExport","member","VariableLikeDeclarationStatement","BREAK","CONTINUE","DO","EMPTY","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VOID","WHILE","asGlobal","endsWith","findDecorator","decorator","__export","OperatorKind","diagnostics_1","types_1","ast_1","module_1","resolver_1","QueuedImport","QueuedExport","TypeAlias","operatorKindFromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","noTypesYet","Map","Program","diagnosticsOffset","elementsLookup","instancesLookup","typesLookup","typeAliases","fileLevelExports","moduleLevelExports","arrayBufferInstance","arrayPrototype","stringInstance","mainFunction","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","resolver","Resolver","sources","getSource","lookupSourceByPath","normalizedPathWithoutExtension","tmp","initialize","options","Type","i8","i16","i32","i64","isizeType","u8","u16","u32","u64","usizeType","bool","f32","f64","void","setConstantInteger","i64_new","isWasm64","noTreeShaking","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","hasFeature","queuedImports","queuedExports","queuedExtends","queuedImplements","filespace","Filespace","internalName","currentFilespace","j","initializeClass","initializeEnum","initializeExports","initializeFunction","initializeImports","initializeInterface","initializeNamespace","initializeTypeAlias","initializeVariables","queuedImport","tryLocateImport","localName","splice","externalNameAlt","Module_0_has_no_exported_member_1","queuedExports_1","__values","queuedExports_1_1","next","done","_c","__read","exportName","queuedExport","currentExport","isReExport","setExportAndCheckLibrary","Cannot_find_name_0","derivedPrototype","derivedDeclaration","derivedType","baseElement","resolveIdentifier","CLASS_PROTOTYPE","basePrototype","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_d","Error","has","resolveClass","instance","Duplicate_identifier_0","programLevelInternalName","FUNCTION_PROTOTYPE","startFunction","GENERIC","AMBIENT","MAIN","resolveFunction","parameterTypes","signatureReference","byteSize","globalName","Global","withConstantIntegerValue","setConstantFloat","withConstantFloatValue","queuedNamedExports","checkDecorators","acceptedFlags","presentFlags","decoratorKindToFlag","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","checkGlobal","parentNode","hasDecorator","namespace","fileLevelInternalName","simpleName","ClassPrototype","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","MODULE_EXPORT","Export_declaration_conflicts_with_exported_declaration_of_0","isEntry","existingExport","memberDeclarations","memberDeclaration","initializeField","GET","SET","initializeAccessor","initializeMethod","classPrototype","isInterface","INTERFACE_PROTOTYPE","staticField","READONLY","ABSTRACT","instanceMembers","instanceField","FieldPrototype","decoratorFlags","FunctionPrototype","constructorPrototype","Multiple_constructor_implementations_are_not_allowed","checkOperatorOverloads","numArgs","firstArg","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","internalPropertyName","propertyElement","isGetter","isNew","PROPERTY","getterPrototype","setterPrototype","Property","baseName","staticName","staticPrototype","instanceName","instancePrototype","Enum","initializeEnumValue","enm","EnumValue","initializeExport","externalIdentifier","prefix","FILESPACE","referencedName","referencedElement","seen","Set","add","initializeImport","indexPart","InterfacePrototype","parentNamespace","Namespace","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","existingExport_1","global_1","CONST","Element","program","NAMESPACE","ENUM","ENUMVALUE","constantValue","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","Parameter","Local","index","LOCAL","scopedGlobal","instances","classTypeArguments","Function","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","breakContext","debugLocations","ref","functionTableIndex","trampoline","outerScope","nextBreakId","breakStack","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","localIndex","INSTANCE","local","thisType","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","_b","inheritedName","inheritedType","parameterType","parameterName","getParameterName","flow","Flow","addLocal","getTempLocal","wrapped","temps","toNativeType","pop","setLocalWrapped","freeTempLocal","getAndFreeTempLocal","enterBreakContext","id","leaveBreakContext","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","FunctionTarget","FUNCTION_TARGET","toSignatureString","asFunction","FIELD_PROTOTYPE","Field","FIELD","memoryOffset","Class","base","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments_2","inheritedTypeArguments_2_1","baseType","isAssignableTo","target","current","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","INTERFACE","FlowFlags","scopedLocals","currentFunction","parentFlow","continueLabel","breakLabel","returnLabel","wrappedLocals","wrappedLocalsExt","unset","fork","branch","slice","free","scopedLocal","SCOPED","addScopedLocal","existingLocal","addScopedLocalAlias","scopedAlias","getScopedLocal","isLocalWrapped","map","ext","i64_ne","i64_and","i64_shl","i64_one","i64_zero","off","i64_or","i64_not","inherit","other","inheritConditional","inheritMutual","leftExt","rightExt","thisExt","minLength","min","canOverflow","getExpressionId","ExpressionId","GetLocal","getGetLocalIndex","canConversionOverflow","SetLocal","isTeeLocal","getSetLocalValue","GetGlobal","Binary","getBinaryOp","BinaryOp","EqI32","EqI64","EqF32","EqF64","NeI32","NeI64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","getBinaryLeft","Const","getConstValueI32","getBinaryRight","AndI32","computeSmallIntegerMask","ShlI32","shift","size","ShrI32","ShrU32","DivU32","RemI32","RemU32","Unary","getUnaryOp","UnaryOp","EqzI32","EqzI64","ClzI32","CtzI32","PopcntI32","getExpressionType","getConstValueI64Low","getConstValueF32","getConstValueF64","MIN_VALUE","MAX_VALUE","Load","fromType","getLoadBytes","isLoadSigned","Block","getBlockName","getBlockChildCount","last","getBlockChild","If","getIfTrue","getIfFalse","Select","getSelectThen","getSelectElse","Call","getCallTarget","Unreachable","fromSize","toSize","compiler_1","NativeType","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallImportId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenPageSize","_BinaryenCurrentMemory","_BinaryenGrowMemory","_BinaryenHasFeature","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","MemorySegment","buffer","offset","segment","Module","cachedTemporaryName","hasTemporaryFunction","cachedPrecomputeName","cachedPrecomputeNames","_BinaryenModuleCreate","cachedByValue","memory","allocate","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocString","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createUnary","op","_BinaryenUnary","createBinary","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","bytes","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","children","_BinaryenBlock","createBreak","_BinaryenBreak","createDrop","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallImport","_BinaryenCallImport","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","addGlobal","mutable","_BinaryenAddGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","removeImport","_BinaryenRemoveImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","nested1","nested2","_BinaryenExpressionGetId","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","_BinaryenGetLocalGetIndex","_BinaryenGetGlobalGetName","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","MAX_MEMORY_WASM32","MAX_MEMORY_WASM64","getConstValueI64High","getSetLocalIndex","_BinaryenSetLocalGetIndex","_BinaryenSetLocalGetValue","_BinaryenSetLocalIsTee","getUnaryValue","getLoadOffset","getLoadPtr","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","store","i32s","val","ptrs","str","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","String","fromCodePoints","needsExplicitUnreachable","Return","Break","numChildren","g","eval","e","window","program_1","TypeKind","TypeFlags","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","classType","asNullable","signednessIsRelevant","currentClass","targetClass","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","Signature","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DECLARE","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","skipIdentifierName","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_16","sepEnd","i64_add","i64_mul","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","Digit_expected","i64_8","Octal_digit_expected","i64_2","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","builtins_1","Options","WASM32","importMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentOuterFunction","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","compileSource","funcRef","ensureFunctionType","i64_align","numPages","i64_shr_u","functionTableExported","moduleExport","makeModuleExport","compileIterateRoots","subPrefix","_e","_f","_g","_h","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","setter","nativeType","nativeSizeType","getterName","setterName","_j","_k","fullName","_l","_m","ctor","compileSourceByPath","reportNode","File_0_not_found","isGeneric","compileClassDeclaration","compileEnumDeclaration","compileFunctionDeclaration","compileNamespaceDeclaration","variableInit","compileVariableStatement","compileExportStatement","previousFunction","compileStatement","compileGlobalDeclaration","compileGlobal","global","initExpr","resolvedType","resolveType","Type_expected","atEnd","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","compileEnum","previousValue","previousValueIsMut","initInStart","valueDeclaration","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunctionUsingTypeArguments","resolveFunctionInclTypeArguments","compileFunction","resultType","An_implementation_cannot_be_declared_in_ambient_contexts","Function_implementation_is_missing_or_not_immediately_following_the_declaration","isConstructor","stmts","compileStatements","unshift","makeConditionalAllocate","A_function_whose_declared_type_is_not_void_must_return_a_value","compileInterfaceDeclaration","compileNamespace","compileClassUsingTypeArguments","alternativeReportNode","resolveClassInclTypeArguments","compileClass","staticMembers","ctorInstance","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","numStatements","Nop","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","breakBlock","repeatBlock","GENERIC_CONTEXT","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","numCases","context","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","isKnownGlobal","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileAssignmentWithValue","compileInlineConstant","contextualType","retainType","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","compileUnaryOverload","operatorInstance","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","resolveExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","currentElementExpression","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","Index_signature_is_missing_in_type_0","valueWithCorrectType","tee","thisExpression","currentThisExpression","thisExpr","setterInstance","getterInstance","nativeReturnType","indexedGet","elementExpr","tempLocalTarget","tempLocalElement","indexArg","compileCallExpressionBuiltin","Type_0_is_not_generic","inferredTypes","numTypeParameters","numParameterTypes","numArguments","argumentExprs","typeNode","argumentExpression","inferredType","concreteType","resolvedTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","compileGetter","compileCallIndirect","typeArgumentNodes","resolveTypeArguments","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","inline","includes","compileCallInlineUnchecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","previousFlow","thisLocal","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","isInstance","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","trampolineName","ofN","Optional_parameter_must_have_an_initializer","ensureArgcVar","numOperands","isCallImport","parameterNodes","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","resolveElementAccess","retainConstantType","scopedThis","_this_cannot_be_referenced_in_current_location","superType","_super_can_only_be_referenced_in_a_derived_class","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","implicitNegate","compileArrayLiteral","floatValue","intValue","i64_sub","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","i64_is_f32","i64_to_f32","i64_is_f64","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","byteLength","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","isConst","compiledValues","constantValues","nativeElementType","isStatic","arrayType","nativeArrayType","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Property_0_does_not_exist_on_type_1","compileAllocate","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","classInstance","currentClassInstance","makeAllocate","propertyAccess","resolvePropertyAccess","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","nativeOne","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","fieldType","nativeFieldType","fieldDeclaration","parentElement","ReportMode","reportMode","REPORT","resolveSignature","numTypeArguments","paramType","instanceKey","placeholderType","parameterTypeNodes","parameterTypeNode","REST","returnTypeNode","parameterCount","argumentCount","Expected_0_type_arguments_but_got_1","contextualFunction","targetExpression","propertyName","elementAccess","explicitLocal","functionTarget","classTypeParameters","numClassTypeParameters","numFunctionTypeArguments","signatureNode","functionTypeParameters","signatureParameters","signatureParameterCount","parameterDeclaration","resolveFunctionPartially","partialKey","partialPrototype","expectedTypeArguments","actualTypeArguments","baseClass","baseClassType","Class_0_is_sealed_and_cannot_be_extended","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","inheritedMember","constructorPartial","baseField","fieldInstance","instanceProperty","partialGetterPrototype","partialSetterPrototype","overloadPrototype","operatorPartial","typeParameterNodes","binaryen","emitText","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","stack","AssertionError","ASC_TARGET","defineProperties","writable","Math","fround","MIN_POSITIVE_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","EPSILON","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","HEAP","HEAP_OFFSET","oldHeap","copy","dest","src","copyWithin","F64","Float64Array","F32","Float32Array","I32","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","mod","i64_rem_u","and","or","i64_xor","xor","shl","i64_shr","shr","shru","not","i64_eq","eq","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","gte","lte","minSafeF64","maxSafeF64","toNumber","i64_to_string","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","pow","fromString","RangeError","indexOf","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","SWALLOW","expr_1","ClzI64","CtzI64","PopcntI64","RotlI32","RotlI64","RotrI32","RotrI64","AbsF32","AbsF64","tempLocal0","tempLocal1","MaxF32","MaxF64","MinF32","MinF64","CeilF32","CeilF64","FloorF32","FloorF64","CopysignF32","CopysignF64","NearestF32","NearestF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","SqrtF32","SqrtF64","TruncF32","TruncF64","evaluateConstantOffset","alignLog2","Type_0_has_no_property_1","CurrentMemory","GrowMemory","abort","operandExprs","signatureParts","nativeParamTypes","operandType","User_defined_0","expr_2","deferASM","deferASMCall","typeArgument","valueType","stringType","messageArg","filenameArg","existingIndex","gcPrototype","gcInstance","VIRTUAL","nativeSizeSize","baseInstance","allocateInstance","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","isUnicodeIdentifierStart","unicodeIdentifierPart","isUnicodeIdentifierPart","mid","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","indent","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","AST","formatDiagnostic","parser_1","parseFile","parser","Parser","nextFile","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoTreeShaking","setNoAssert","setImportMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","decompiler","Decompiler","decompile","buildIDL","IDLBuilder","build","buildTSD","TSDBuilder","functionId","decompileFunction","nativeTypeToType","decompileExpression","nested","string","Loop","Switch","CallImport","CallIndirect","SetGlobal","Store","Drop","Host","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","ExportsWalker","includePrivate","todo","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","prop","hasCompiledMember","visitNamespace","visitFunction","visitClass","indentLevel","typeToString","members_1","members_1_1","visitInterface","numMembers","members_2","members_2_1","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","parseEnumValue","parseReturn","parseTypeParameters","typeParameter","parseTypeParameter","Type_parameter_list_cannot_be_empty","parseParameters","seenRest","seenOptional","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","staticStart","staticEnd","abstractStart","abstractEnd","readonlyStart","readonlyEnd","setEnd","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","QUOTED","PREFIX","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","determinePrecedence","commaExprs","isRightAssociative","propertyCall","skipBlock","depth","Precedence"],"mappings":"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M,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCE,GACJ,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__15__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 13,\n  /** Is generic. */\n  GENERIC = 1 << 14,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 15,\n  /** Is an instance member. */\n  INSTANCE = 1 << 16,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 17,\n  /** Is an arrow function. */\n  ARROW = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is compiled. */\n  COMPILED = 1 << 21,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 22,\n  /** Is scoped. */\n  SCOPED = 1 << 23,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 24,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 25,\n  /** Is the main function. */\n  MAIN = 1 << 26,\n\n  // Other\n\n  QUOTED = 1 << 27\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Prefix used to indicate a filespace element. */\nexport const FILESPACE_PREFIX = \"file:\";\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(message.range, useColors));\n    }\n\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n  /** Parent node. */\n  parent: Node | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n\n  // types\n\n  static createType(\n    name: IdentifierExpression,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name; name.parent = type;\n    type.typeArguments = typeArguments; if (typeArguments) setParent(typeArguments, type);\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createIdentifierExpression(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.extendsType = extendsType; if (extendsType) extendsType.parent = elem;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters; setParent(parameters, sig);\n    sig.returnType = returnType; returnType.parent = sig;\n    sig.explicitThisType = explicitThisType; if (explicitThisType) explicitThisType.parent = sig;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.arguments = args; if (args) setParent(args, stmt);\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements; setParentIfNotNull(elements, expr);\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression; expression.parent = expr;\n    expr.toType = toType; toType.parent = expr;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left; left.parent = expr;\n    expr.right = right; right.parent = expr;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions; setParent(expressions, expr);\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.elementExpression = element; element.parent = expr;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.flags = declaration.flags & CommonFlags.ARROW;\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.isType = isType; isType.parent = expr;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.typeArguments = typeArgs; if (typeArgs) setParent(typeArgs, expr);\n    expr.arguments = args; setParent(args, expr);\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression; expression.parent = expr;\n    expr.property = property; property.parent = expr;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition; condition.parent = expr;\n    expr.ifThen = ifThen; ifThen.parent = expr;\n    expr.ifElse = ifElse; ifElse.parent = expr;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand; operand.parent = expr;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier; identifier.parent = stmt;\n    stmt.typeParameters = typeParameters; setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.implementsTypes = implementsTypes; if (implementsTypes) setParent(implementsTypes, stmt);\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label; if (label) label.parent = stmt;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement; statement.parent = stmt;\n    stmt.condition = condition; condition.parent = stmt;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.values = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    flags: CommonFlags,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.members = members; if (members) setParent(members, stmt);\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name; name.parent = stmt;\n    stmt.externalName = externalName; externalName.parent = stmt;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.name = name; name.parent = elem;\n    if (!externalName) {\n      externalName = name;\n    } else {\n      externalName.parent = elem;\n    }\n    elem.externalName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression; expression.parent = stmt;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.ifTrue = ifTrue; ifTrue.parent = stmt;\n    stmt.ifFalse = ifFalse; if (ifFalse) ifFalse.parent = stmt;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls; if (decls) setParent(decls, stmt);\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    externalName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.externalName = externalName; externalName.parent = elem;\n    if (!name) {\n      name = externalName;\n    } else {\n      name.parent = elem;\n    }\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[],\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.extendsType = extendsType; if (extendsType) extendsType.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.type = type; if (type) type.parent = stmt;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer; if (initializer) initializer.parent = stmt;\n    stmt.condition = condition; if (condition) condition.parent = stmt;\n    stmt.incrementor = incrementor; if (incrementor) incrementor.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.signature = signature; signature.parent = stmt;\n    stmt.body = body; if (body) body.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.members = members; setParent(members, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value; if (value) value.parent = stmt;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.cases = cases; setParent(cases, stmt);\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label; if (label) label.parent = elem;\n    elem.statements = statements; setParent(statements, elem);\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value; value.parent = stmt;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements; setParent(statements, stmt);\n    stmt.catchVariable = catchVariable;\n    if (catchVariable) catchVariable.parent = stmt;\n    stmt.catchStatements = catchStatements;\n    if (catchStatements) setParent(catchStatements, stmt);\n    stmt.finallyStatements = finallyStatements;\n    if (finallyStatements) setParent(finallyStatements, stmt);\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name; name.parent = stmt;\n    stmt.typeParameters = typeParameters; if (typeParameters) setParent(typeParameters, stmt);\n    stmt.type = alias; alias.parent = stmt;\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.declarations = declarations; setParent(declarations, stmt);\n    stmt.decorators = decorators; if (decorators) setParent(decorators, stmt);\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name; name.parent = elem;\n    elem.type = type; if (type) type.parent = elem;\n    elem.initializer = initializer; if (initializer) initializer.parent = elem;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition; condition.parent = stmt;\n    stmt.statement = statement; statement.parent = stmt;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\nexport function isLastStatement(statement: Statement): bool {\n  var parent = assert(statement.parent);\n  if (parent.kind == NodeKind.BLOCK) {\n    let statements = (<BlockStatement>parent).statements;\n    if (statements[statements.length - 1] === statement) {\n      switch (assert(parent.parent).kind) {\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.METHODDECLARATION: return true;\n      }\n    }\n  }\n  return false;\n}\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n\n  protected cachedProgramLevelInternalName: string | null = null;\n  protected cachedFileLevelInternalName: string | null = null;\n\n  /** Gets the mangled program-level internal name of this declaration. */\n  get programLevelInternalName(): string {\n    if (!this.cachedProgramLevelInternalName) {\n      this.cachedProgramLevelInternalName = mangleInternalName(this, true);\n    }\n    return this.cachedProgramLevelInternalName;\n  }\n\n  /** Gets the mangled file-level internal name of this declaration. */\n  get fileLevelInternalName(): string {\n    if (!this.cachedFileLevelInternalName) {\n      this.cachedFileLevelInternalName = mangleInternalName(this, false);\n    }\n    return this.cachedFileLevelInternalName;\n  }\n\n  /** Tests if this is a top-level declaration within its source file. */\n  get isTopLevel(): bool {\n    var parent = this.parent;\n    if (!parent) {\n      return false;\n    }\n    if (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent)) {\n      return false;\n    }\n    return parent.kind == NodeKind.SOURCE;\n  }\n\n  /** Tests if this declaration is a top-level export within its source file. */\n  get isTopLevelExport(): bool {\n    var parent = this.parent;\n    if (!parent || (parent.kind == NodeKind.VARIABLE && !(parent = parent.parent))) {\n      return false;\n    }\n    if (parent.kind == NodeKind.NAMESPACEDECLARATION) {\n      return this.is(CommonFlags.EXPORT) && (<NamespaceDeclaration>parent).isTopLevelExport;\n    }\n    if (parent.kind == NodeKind.CLASSDECLARATION) {\n      return this.is(CommonFlags.STATIC) && (<ClassDeclaration>parent).isTopLevelExport;\n    }\n    return parent.kind == NodeKind.SOURCE && this.is(CommonFlags.EXPORT);\n  }\n\n  /** Tests if this declaration needs an explicit export. */\n  needsExplicitExport(member: ExportMember): bool {\n    // This is necessary because module-level exports are automatically created\n    // for top level declarations of all sorts. This function essentially tests\n    // that there isn't a otherwise duplicate top-level export already.\n    return (\n      member.name.text != member.externalName.text || // if aliased\n      this.range.source != member.range.source ||     // if a re-export\n      !this.isTopLevelExport                          // if not top-level\n    );\n  }\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[];\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Identifier being exported. */\n  name: IdentifierExpression;\n  /** Identifier seen when imported again. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a filespace export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index within the constructor, if applicable. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles a declaration's name to an internal name. */\nexport function mangleInternalName(declaration: DeclarationStatement, asGlobal: bool = false): string {\n  var name = declaration.name.text;\n  var parent = declaration.parent;\n  if (!parent) return name;\n  if (\n    declaration.kind == NodeKind.VARIABLEDECLARATION &&\n    parent.kind == NodeKind.VARIABLE\n  ) { // skip over\n    if (!(parent = parent.parent)) return name;\n  }\n  if (parent.kind == NodeKind.CLASSDECLARATION) {\n    return mangleInternalName(<ClassDeclaration>parent, asGlobal) + (\n      declaration.is(CommonFlags.STATIC)\n        ? STATIC_DELIMITER\n        : INSTANCE_DELIMITER\n    ) + name;\n  }\n  if (\n    parent.kind == NodeKind.NAMESPACEDECLARATION ||\n    parent.kind == NodeKind.ENUMDECLARATION\n  ) {\n    return mangleInternalName(<DeclarationStatement>parent, asGlobal) +\n           STATIC_DELIMITER + name;\n  }\n  return asGlobal\n    ? name\n    : declaration.range.source.internalPath + PATH_DELIMITER + name;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n// Helpers\n\n/** Sets the parent node on an array of nodes. */\nfunction setParent(nodes: Node[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    nodes[i].parent = parent;\n  }\n}\n\n/** Sets the parent node on an array of nullable nodes. */\nfunction setParentIfNotNull(nodes: (Node | null)[], parent: Node): void {\n  for (let i = 0, k = nodes.length; i < k; ++i) {\n    let node = nodes[i];\n    if (node) node.parent = parent;\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./charcode\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  LIBRARY_PREFIX,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  FILESPACE_PREFIX\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  Range,\n  CommonTypeNode,\n  TypeParameterNode,\n  DecoratorNode,\n  DecoratorKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  NativeType,\n  FunctionRef,\n  ExpressionRef,\n  ExpressionId,\n  BinaryOp,\n  UnaryOp,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getBinaryOp,\n  getConstValueI32,\n  getBinaryLeft,\n  getBinaryRight,\n  getUnaryOp,\n  getExpressionType,\n  getLoadBytes,\n  isLoadSigned,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getConstValueF32,\n  getConstValueF64,\n  getConstValueI64Low\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\n/** Represents a yet unresolved import. */\nclass QueuedImport {\n  localName: string;\n  externalName: string;\n  externalNameAlt: string;\n  declaration: ImportDeclaration | null; // not set if a filespace\n}\n\n/** Represents a yet unresolved export. */\nclass QueuedExport {\n  externalName: string;\n  isReExport: bool;\n  member: ExportMember;\n}\n\n/** Represents a type alias. */\nclass TypeAlias {\n  typeParameters: TypeParameterNode[] | null;\n  type: CommonTypeNode;\n}\n\n/** Represents a module-level export. */\nclass ModuleExport {\n  element: Element;\n  identifier: IdentifierExpression;\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\nconst noTypesYet = new Map<string,Type>();\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Array of source files. */\n  sources: Source[];\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n\n  /** Elements by internal name. */\n  elementsLookup: Map<string,Element> = new Map();\n  /** Class and function instances by internal name. */\n  instancesLookup: Map<string,Element> = new Map();\n  /** Types by internal name. */\n  typesLookup: Map<string,Type> = noTypesYet;\n  /** Declared type aliases. */\n  typeAliases: Map<string,TypeAlias> = new Map();\n  /** File-level exports by exported name. */\n  fileLevelExports: Map<string,Element> = new Map();\n  /** Module-level exports by exported name. */\n  moduleLevelExports: Map<string,ModuleExport> = new Map();\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Start function reference. */\n  startFunction: FunctionPrototype;\n  /** Main function reference, if present. */\n  mainFunction: FunctionPrototype | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Currently processing filespace. */\n  currentFilespace: Filespace;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.resolver = new Resolver(this);\n    this.sources = [];\n  }\n\n  /** Gets a source by its exact path. */\n  getSource(normalizedPath: string): Source | null {\n    var sources = this.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      let source = sources[i];\n      if (source.normalizedPath == normalizedPath) return source;\n    }\n    return null;\n  }\n\n  /** Looks up the source for the specified possibly ambiguous path. */\n  lookupSourceByPath(normalizedPathWithoutExtension: string): Source | null {\n    var tmp: string;\n    return (\n      this.getSource(normalizedPathWithoutExtension + \".ts\") ||\n      this.getSource(normalizedPathWithoutExtension + \"/index.ts\") ||\n      this.getSource((tmp = LIBRARY_PREFIX + normalizedPathWithoutExtension) + \".ts\") ||\n      this.getSource( tmp                                                    + \"/index.ts\")\n    );\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // add built-in types\n    this.typesLookup = new Map([\n      [\"i8\", Type.i8],\n      [\"i16\", Type.i16],\n      [\"i32\", Type.i32],\n      [\"i64\", Type.i64],\n      [\"isize\", options.isizeType],\n      [\"u8\", Type.u8],\n      [\"u16\", Type.u16],\n      [\"u32\", Type.u32],\n      [\"u64\", Type.u64],\n      [\"usize\", options.usizeType],\n      [\"bool\", Type.bool],\n      [\"f32\", Type.f32],\n      [\"f64\", Type.f64],\n      [\"void\", Type.void],\n      [\"number\", Type.f64],\n      [\"boolean\", Type.bool]\n    ]);\n\n    // add compiler hints\n    this.setConstantInteger(\"ASC_TARGET\", Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.setConstantInteger(\"ASC_NO_TREESHAKING\", Type.bool,\n      i64_new(options.noTreeShaking ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_NO_ASSERT\", Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_MEMORY_BASE\", Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.setConstantInteger(\"ASC_OPTIMIZE_LEVEL\", Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.setConstantInteger(\"ASC_SHRINK_LEVEL\", Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.setConstantInteger(\"ASC_FEATURE_MUTABLE_GLOBAL\", Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.setConstantInteger(\"ASC_FEATURE_SIGN_EXTENSION\", Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<string,QueuedExport>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // build initial lookup maps of internal names to declarations\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n\n      // create one filespace per source\n      let filespace = new Filespace(this, source);\n      this.elementsLookup.set(filespace.internalName, filespace);\n      this.currentFilespace = filespace;\n\n      // process this source's statements\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement);\n            break;\n          }\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, queuedExports);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, queuedExports, queuedImports);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeAlias(<TypeDeclaration>statement);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0; i < queuedImports.length;) {\n      let queuedImport = queuedImports[i];\n      let declaration = queuedImport.declaration;\n      if (declaration) { // named\n        let element = this.tryLocateImport(queuedImport.externalName, queuedExports);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.tryLocateImport(queuedImport.externalNameAlt, queuedExports)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              declaration.range,\n              (<ImportStatement>declaration.parent).path.value,\n              declaration.externalName.text\n            );\n            ++i;\n          }\n        }\n      } else { // filespace\n        let element = this.elementsLookup.get(queuedImport.externalName);\n        if (element) {\n          this.elementsLookup.set(queuedImport.localName, element);\n          queuedImports.splice(i, 1);\n        } else {\n          if (element = this.elementsLookup.get(queuedImport.externalNameAlt)) {\n            this.elementsLookup.set(queuedImport.localName, element);\n            queuedImports.splice(i, 1);\n          } else {\n            assert(false); // already reported by the parser not finding the file\n            ++i;\n          }\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [exportName, queuedExport] of queuedExports) {\n      let currentExport: QueuedExport | null = queuedExport; // nullable below\n      let element: Element | null;\n      do {\n        if (currentExport.isReExport) {\n          if (element = this.fileLevelExports.get(currentExport.externalName)) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n            break;\n          }\n          currentExport = queuedExports.get(currentExport.externalName);\n          if (!currentExport) {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.member.externalName.range,\n              (<StringLiteralExpression>(<ExportStatement>queuedExport.member.parent).path).value,\n              queuedExport.member.externalName.text\n            );\n          }\n        } else {\n          if (\n            // normal export\n            (element = this.elementsLookup.get(currentExport.externalName)) ||\n            // library re-export\n            (element = this.elementsLookup.get(currentExport.member.name.text))\n          ) {\n            this.setExportAndCheckLibrary(\n              exportName,\n              element,\n              queuedExport.member.externalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Cannot_find_name_0,\n              queuedExport.member.range, queuedExport.member.name.text\n            );\n          }\n          break;\n        }\n      } while (currentExport);\n    }\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let derivedPrototype = queuedExtends[i];\n      let derivedDeclaration = derivedPrototype.declaration;\n      let derivedType = assert(derivedDeclaration.extendsType);\n      let baseElement = resolver.resolveIdentifier(derivedType.name, null); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        derivedPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          derivedType.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let element = this.elementsLookup.get(name);\n          if (element) this.elementsLookup.set(alias, element);\n          else throw new Error(\"element not found: \" + name);\n        }\n      }\n    }\n\n    // register 'ArrayBuffer'\n    if (this.elementsLookup.has(\"ArrayBuffer\")) {\n      let element = assert(this.elementsLookup.get(\"ArrayBuffer\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n    }\n\n    // register 'Array'\n    if (this.elementsLookup.has(\"Array\")) {\n      let element = assert(this.elementsLookup.get(\"Array\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      this.arrayPrototype = <ClassPrototype>element;\n    }\n\n    // register 'String'\n    if (this.elementsLookup.has(\"String\")) {\n      let element = assert(this.elementsLookup.get(\"String\"));\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let instance = resolver.resolveClass(<ClassPrototype>element, null);\n      if (instance) {\n        if (this.typesLookup.has(\"string\")) {\n          let declaration = (<ClassPrototype>element).declaration;\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, declaration.programLevelInternalName\n          );\n        } else {\n          this.stringInstance = instance;\n          this.typesLookup.set(\"string\", instance.type);\n        }\n      }\n    }\n\n    // register 'start'\n    {\n      let element = assert(this.elementsLookup.get(\"start\"));\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      this.startFunction = <FunctionPrototype>element;\n    }\n\n    // register 'main' if present\n    if (this.moduleLevelExports.has(\"main\")) {\n      let element = (<ModuleExport>this.moduleLevelExports.get(\"main\")).element;\n      if (\n        element.kind == ElementKind.FUNCTION_PROTOTYPE &&\n        !(<FunctionPrototype>element).isAny(CommonFlags.GENERIC | CommonFlags.AMBIENT)\n      ) {\n        (<FunctionPrototype>element).set(CommonFlags.MAIN);\n        this.mainFunction = <FunctionPrototype>element;\n      }\n    }\n\n    // register 'abort' if present\n    if (this.elementsLookup.has(\"abort\")) {\n      let element = <Element>this.elementsLookup.get(\"abort\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      if (instance) this.abortInstance = instance;\n    }\n\n    // register 'memory.allocate' if present\n    if (this.elementsLookup.has(\"memory\")) {\n      let element = <Element>this.elementsLookup.get(\"memory\");\n      let members = element.members;\n      if (members) {\n        if (members.has(\"allocate\")) {\n          element = assert(members.get(\"allocate\"));\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          let instance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n          if (instance) this.memoryAllocateInstance = instance;\n        }\n      }\n    }\n\n    // register GC hooks if present\n    if (\n      this.elementsLookup.has(\"__gc_allocate\") &&\n      this.elementsLookup.has(\"__gc_link\") &&\n      this.elementsLookup.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsLookup.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsLookup.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n  }\n\n  /** Sets a constant integer value. */\n  setConstantInteger(globalName: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantIntegerValue(value)\n    );\n  }\n\n  /** Sets a constant float value. */\n  setConstantFloat(globalName: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.elementsLookup.set(globalName,\n      new Global(this, globalName, globalName, type, null, DecoratorFlags.NONE)\n        .withConstantFloatValue(value)\n    );\n  }\n\n  /** Tries to locate an import by traversing exports and queued exports. */\n  private tryLocateImport(\n    externalName: string,\n    queuedNamedExports: Map<string,QueuedExport>\n  ): Element | null {\n    var element: Element | null;\n    var fileLevelExports = this.fileLevelExports;\n    do {\n      if (element = fileLevelExports.get(externalName)) return element;\n      let queuedExport = queuedNamedExports.get(externalName);\n      if (!queuedExport) break;\n      if (queuedExport.isReExport) {\n        externalName = queuedExport.externalName;\n        continue;\n      }\n      return this.elementsLookup.get(queuedExport.externalName);\n    } while (true);\n    return null;\n  }\n\n  /** Checks that only supported decorators are present. */\n  private checkDecorators(\n    decorators: DecoratorNode[],\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var presentFlags = DecoratorFlags.NONE;\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      let kind = decoratorNameToKind(decorator.name);\n      let flag = decoratorKindToFlag(kind);\n      if (flag) {\n        if (flag == DecoratorFlags.BUILTIN) {\n          if (decorator.range.source.isLibrary) {\n            presentFlags |= flag;\n          } else {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          }\n        } else if (!(acceptedFlags & flag)) {\n          this.error(\n            DiagnosticCode.Decorator_0_is_not_valid_here,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else if (presentFlags & flag) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            decorator.range, decorator.name.range.toString()\n          );\n        } else {\n          presentFlags |= flag;\n        }\n      }\n    }\n    return presentFlags;\n  }\n\n  /** Checks and sets up global options of an element. */\n  private checkGlobal(\n    element: Element,\n    declaration: DeclarationStatement\n  ): void {\n    var parentNode = declaration.parent;\n    // alias globally if explicitly annotated @global or exported from a top-level library file\n    if (\n      (element.hasDecorator(DecoratorFlags.GLOBAL)) ||\n      (\n        declaration.range.source.isLibrary &&\n        element.is(CommonFlags.EXPORT) &&\n        (\n          assert(parentNode).kind == NodeKind.SOURCE ||\n          (\n            <Node>parentNode).kind == NodeKind.VARIABLE &&\n            assert((<Node>parentNode).parent).kind == NodeKind.SOURCE\n          )\n        )\n    ) {\n      let globalName = declaration.programLevelInternalName;\n      if (this.elementsLookup.has(globalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, element.internalName\n        );\n      } else {\n        this.elementsLookup.set(globalName, element);\n      }\n    }\n    // builtins use the global name directly\n    if (element.hasDecorator(DecoratorFlags.BUILTIN)) {\n      element.internalName = declaration.programLevelInternalName;\n    }\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    declaration: ClassDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new ClassPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.SEALED |\n            DecoratorFlags.UNMANAGED\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      if (prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n\n      // remember classes that implement interfaces\n      } else if (numImplementsTypes) {\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(prototype);\n      }\n    }\n\n    // remember classes that extend another one\n    if (declaration.extendsType) queuedExtends.push(prototype);\n\n    // add as namespace member if applicable\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // otherwise add to file-level exports if exported\n    } else if (prototype.is(CommonFlags.EXPORT)) {\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (prototype.is(CommonFlags.EXPORT) && declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          assert(false); // should have been reported while parsing\n          return;\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    declaration: FieldDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var decorators = declaration.decorators;\n    var isInterface = classPrototype.kind == ElementKind.INTERFACE_PROTOTYPE;\n\n    // static fields become global variables\n    if (declaration.is(CommonFlags.STATIC)) {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(false);\n      }\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      let staticField = new Global(\n        this,\n        name,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators, DecoratorFlags.INLINE)\n          : DecoratorFlags.NONE\n      );\n      staticField.parent = classPrototype;\n      classPrototype.members.set(name, staticField);\n      this.elementsLookup.set(internalName, staticField);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        staticField.set(CommonFlags.MODULE_EXPORT);\n      }\n\n      if (staticField.hasDecorator(DecoratorFlags.INLINE) && !staticField.is(CommonFlags.READONLY)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n    // instance fields are remembered until resolved\n    } else {\n      if (isInterface) {\n        // should have been reported while parsing\n        assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      }\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(name)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instanceField = new FieldPrototype(\n        classPrototype,\n        name,\n        internalName,\n        declaration\n      );\n      if (decorators) this.checkDecorators(decorators, DecoratorFlags.NONE);\n      classPrototype.instanceMembers.set(name, instanceField);\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    var prototype: FunctionPrototype | null = null;\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.OPERATOR_BINARY  |\n        DecoratorFlags.OPERATOR_PREFIX  |\n        DecoratorFlags.OPERATOR_POSTFIX |\n        DecoratorFlags.INLINE\n      );\n    }\n\n    // static methods become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0, declaration.name.range,\n          internalName\n        );\n        return;\n      }\n      if (classPrototype.members) {\n        if (classPrototype.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.members = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      classPrototype.members.set(simpleName, prototype);\n      this.elementsLookup.set(internalName, prototype);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance methods are remembered until resolved\n    } else {\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      prototype = new FunctionPrototype(\n        this,\n        simpleName,\n        internalName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      // if (classPrototype.isUnmanaged && instancePrototype.isAbstract) {\n      //   this.error( Unmanaged classes cannot declare abstract methods. );\n      // }\n      if (declaration.name.kind == NodeKind.CONSTRUCTOR) {\n        if (classPrototype.constructorPrototype) {\n          this.error(\n            DiagnosticCode.Multiple_constructor_implementations_are_not_allowed,\n            declaration.name.range\n          );\n        } else {\n          prototype.set(CommonFlags.CONSTRUCTOR);\n          classPrototype.constructorPrototype = prototype;\n        }\n      } else {\n        classPrototype.instanceMembers.set(simpleName, prototype);\n      }\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    this.checkOperatorOverloads(declaration.decorators, prototype, classPrototype);\n  }\n\n  private checkOperatorOverloads(\n    decorators: DecoratorNode[] | null,\n    prototype: FunctionPrototype,\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(0)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  private initializeAccessor(\n    declaration: MethodDeclaration,\n    classPrototype: ClassPrototype\n  ): void {\n    var simpleName = declaration.name.text;\n    var internalPropertyName = declaration.fileLevelInternalName;\n    var propertyElement = this.elementsLookup.get(internalPropertyName);\n    var isGetter = declaration.is(CommonFlags.GET);\n    var isNew = false;\n    if (propertyElement) {\n      if (\n        propertyElement.kind != ElementKind.PROPERTY ||\n        (isGetter\n          ? (<Property>propertyElement).getterPrototype\n          : (<Property>propertyElement).setterPrototype\n        ) != null\n      ) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalPropertyName\n        );\n        return;\n      }\n    } else {\n      propertyElement = new Property(\n        this,\n        simpleName,\n        internalPropertyName,\n        classPrototype\n      );\n      isNew = true;\n    }\n\n    var decorators = declaration.decorators;\n    var decoratorFlags = DecoratorFlags.NONE;\n    if (decorators) {\n      decoratorFlags = this.checkDecorators(decorators,\n        DecoratorFlags.INLINE\n      );\n    }\n\n    var baseName = (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + simpleName;\n\n    // static accessors become global functions\n    if (declaration.is(CommonFlags.STATIC)) {\n      let staticName = classPrototype.internalName + STATIC_DELIMITER + baseName;\n      if (this.elementsLookup.has(staticName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, staticName\n        );\n        return;\n      }\n      let staticPrototype = new FunctionPrototype(\n        this,\n        baseName,\n        staticName,\n        declaration,\n        null,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = staticPrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = staticPrototype;\n      }\n      if (isNew) {\n        if (classPrototype.members) {\n          if (classPrototype.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, staticName\n            );\n            return;\n          }\n        } else {\n          classPrototype.members = new Map();\n        }\n        classPrototype.members.set(simpleName, propertyElement); // check above\n      } else {\n        assert(classPrototype.members && classPrototype.members.has(simpleName));\n      }\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n      }\n\n    // instance accessors are remembered until resolved\n    } else {\n      let instanceName = classPrototype.internalName + INSTANCE_DELIMITER + baseName;\n      if (classPrototype.instanceMembers) {\n        if (classPrototype.instanceMembers.has(baseName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalPropertyName\n          );\n          return;\n        }\n      } else {\n        classPrototype.instanceMembers = new Map();\n      }\n      let instancePrototype = new FunctionPrototype(\n        this,\n        baseName,\n        instanceName,\n        declaration,\n        classPrototype,\n        decoratorFlags\n      );\n      if (isGetter) {\n        (<Property>propertyElement).getterPrototype = instancePrototype;\n      } else {\n        (<Property>propertyElement).setterPrototype = instancePrototype;\n      }\n      classPrototype.instanceMembers.set(baseName, propertyElement);\n      this.elementsLookup.set(internalPropertyName, propertyElement);\n      if (classPrototype.is(CommonFlags.MODULE_EXPORT)) {\n        propertyElement.set(CommonFlags.MODULE_EXPORT);\n        instancePrototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n  }\n\n  private initializeEnum(\n    declaration: EnumDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var element = new Enum(this, simpleName, internalName, declaration);\n    element.parent = namespace;\n    this.elementsLookup.set(internalName, element);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, element);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && element.is(CommonFlags.EXPORT)) {\n        element.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (element.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, element);\n      this.currentFilespace.members.set(simpleName, element);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        element.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n\n    this.checkGlobal(element, declaration);\n  }\n\n  private initializeEnumValue(\n    declaration: EnumValueDeclaration,\n    enm: Enum\n  ): void {\n    var name = declaration.name.text;\n    var internalName = declaration.fileLevelInternalName;\n    if (enm.members) {\n      if (enm.members.has(name)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n    } else {\n      enm.members = new Map();\n    }\n    var value = new EnumValue(enm, this, name, internalName, declaration);\n    enm.members.set(name, value);\n    if (enm.is(CommonFlags.MODULE_EXPORT)) {\n      value.set(CommonFlags.MODULE_EXPORT);\n    }\n  }\n\n  private initializeExports(\n    statement: ExportStatement,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var members = statement.members;\n    if (members) { // named\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], statement.internalPath, queuedExports);\n      }\n    } else { // TODO: filespace\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.range\n      );\n    }\n  }\n\n  private setExportAndCheckLibrary(\n    internalName: string,\n    element: Element,\n    externalIdentifier: IdentifierExpression\n  ): void {\n    // add to file-level exports\n    this.fileLevelExports.set(internalName, element);\n\n    // add to filespace\n    var internalPath = externalIdentifier.range.source.internalPath;\n    var prefix = FILESPACE_PREFIX + internalPath;\n    var filespace = this.elementsLookup.get(prefix);\n    if (!filespace) filespace = assert(this.elementsLookup.get(prefix + PATH_DELIMITER + \"index\"));\n    assert(filespace.kind == ElementKind.FILESPACE);\n    var simpleName = externalIdentifier.text;\n    (<Filespace>filespace).members.set(simpleName, element);\n\n    // add global alias if a top-level export of a library file\n    var source = externalIdentifier.range.source;\n    if (source.isLibrary) {\n      if (this.elementsLookup.has(simpleName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          externalIdentifier.range, simpleName\n        );\n      } else {\n        element.internalName = simpleName;\n        this.elementsLookup.set(simpleName, element);\n      }\n\n    // add module level export if a top-level export of an entry file\n    } else if (source.isEntry) {\n      this.moduleLevelExports.set(externalIdentifier.text, <ModuleExport>{\n        element,\n        identifier: externalIdentifier\n      });\n    }\n  }\n\n  private initializeExport(\n    member: ExportMember,\n    internalPath: string | null,\n    queuedExports: Map<string,QueuedExport>\n  ): void {\n    var externalName = member.range.source.internalPath + PATH_DELIMITER + member.externalName.text;\n    if (this.fileLevelExports.has(externalName)) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.externalName.range, externalName\n      );\n      return;\n    }\n    var referencedName: string;\n    var referencedElement: Element | null;\n    var queuedExport: QueuedExport | null;\n\n    // export local element\n    if (internalPath == null) {\n      referencedName = member.range.source.internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the element exists\n      if (this.elementsLookup.has(referencedName)) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          <Element>this.elementsLookup.get(referencedName),\n          member.externalName\n        );\n        return;\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = false;\n      queuedExport.externalName = referencedName; // -> here: local name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n\n    // export external element\n    } else {\n      referencedName = internalPath + PATH_DELIMITER + member.name.text;\n\n      // resolve right away if the export exists\n      referencedElement = this.elementsLookup.get(referencedName);\n      if (referencedElement) {\n        this.setExportAndCheckLibrary(\n          externalName,\n          referencedElement,\n          member.externalName\n        );\n        return;\n      }\n\n      // walk already known queued exports\n      let seen = new Set<QueuedExport>();\n      while (queuedExport = queuedExports.get(referencedName)) {\n        if (queuedExport.isReExport) {\n          referencedElement = this.fileLevelExports.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          referencedName = queuedExport.externalName;\n          if (seen.has(queuedExport)) break;\n          seen.add(queuedExport);\n        } else {\n          referencedElement = this.elementsLookup.get(queuedExport.externalName);\n          if (referencedElement) {\n            this.setExportAndCheckLibrary(\n              externalName,\n              referencedElement,\n              member.externalName\n            );\n            return;\n          }\n          break;\n        }\n      }\n\n      // otherwise queue it\n      if (queuedExports.has(externalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          member.externalName.range, externalName\n        );\n        return;\n      }\n      queuedExport = new QueuedExport();\n      queuedExport.isReExport = true;\n      queuedExport.externalName = referencedName; // -> here: external name\n      queuedExport.member = member;\n      queuedExports.set(externalName, queuedExport);\n    }\n  }\n\n  private initializeFunction(\n    declaration: FunctionDeclaration,\n    namespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n    var simpleName = declaration.name.text;\n    var decorators = declaration.decorators;\n    var prototype = new FunctionPrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      null,\n      decorators\n        ? this.checkDecorators(decorators,\n            DecoratorFlags.GLOBAL |\n            DecoratorFlags.INLINE |\n            DecoratorFlags.EXTERNAL\n          )\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(simpleName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.parent = namespace;\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeImports(\n    statement: ImportStatement,\n    queuedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) {\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          statement.internalPath,\n          queuedExports, queuedImports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as simpleName from \"file\"\n      let simpleName = statement.namespaceName.text;\n      let internalName = (\n        statement.range.source.internalPath +\n        PATH_DELIMITER +\n        simpleName\n      );\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          statement.namespaceName.range,\n          internalName\n        );\n        return;\n      }\n\n      // resolve right away if the exact filespace exists\n      let filespace = this.elementsLookup.get(statement.internalPath);\n      if (filespace) {\n        this.elementsLookup.set(internalName, filespace);\n        return;\n      }\n\n      // otherwise queue it\n      let queuedImport = new QueuedImport();\n      queuedImport.localName = internalName;\n      let externalName = FILESPACE_PREFIX + statement.internalPath;\n      queuedImport.externalName = externalName;\n      queuedImport.externalNameAlt = externalName + PATH_DELIMITER + \"index\";\n      queuedImport.declaration = null; // filespace\n      queuedImports.push(queuedImport);\n    }\n  }\n\n  private initializeImport(\n    declaration: ImportDeclaration,\n    internalPath: string,\n    queuedNamedExports: Map<string,QueuedExport>,\n    queuedImports: QueuedImport[]\n  ): void {\n    var localName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(localName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, localName\n      );\n      return;\n    }\n\n    var externalName = internalPath + PATH_DELIMITER + declaration.externalName.text;\n\n    // resolve right away if the exact export exists\n    var element: Element | null;\n    if (element = this.fileLevelExports.get(externalName)) {\n      this.elementsLookup.set(localName, element);\n      return;\n    }\n\n    // otherwise queue it\n    const indexPart = PATH_DELIMITER + \"index\";\n    var queuedImport = new QueuedImport();\n    queuedImport.localName = localName;\n    if (internalPath.endsWith(indexPart)) {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath.substring(0, internalPath.length - indexPart.length + 1) +\n        declaration.externalName.text\n      );\n    } else {\n      queuedImport.externalName = externalName; // try exact first\n      queuedImport.externalNameAlt = (\n        internalPath +\n        indexPart +\n        PATH_DELIMITER +\n        declaration.externalName.text\n      );\n    }\n    queuedImport.declaration = declaration; // named\n    queuedImports.push(queuedImport);\n  }\n\n  private initializeInterface(declaration: InterfaceDeclaration, namespace: Element | null = null): void {\n    var internalName = declaration.fileLevelInternalName;\n    if (this.elementsLookup.has(internalName)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, internalName\n      );\n      return;\n    }\n\n    var decorators = declaration.decorators;\n    var simpleName = declaration.name.text;\n    var prototype = new InterfacePrototype(\n      this,\n      simpleName,\n      internalName,\n      declaration,\n      decorators\n        ? this.checkDecorators(decorators, DecoratorFlags.GLOBAL)\n        : DecoratorFlags.NONE\n    );\n    prototype.parent = namespace;\n    this.elementsLookup.set(internalName, prototype);\n\n    if (namespace) {\n      if (namespace.members) {\n        if (namespace.members.has(prototype.internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        namespace.members = new Map();\n      }\n      namespace.members.set(prototype.internalName, prototype);\n      if (namespace.is(CommonFlags.MODULE_EXPORT) && prototype.is(CommonFlags.EXPORT)) {\n        prototype.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (prototype.is(CommonFlags.EXPORT)) { // no namespace\n      if (this.fileLevelExports.has(internalName)) {\n        this.error(\n          DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n          declaration.name.range, internalName\n        );\n        return;\n      }\n      this.fileLevelExports.set(internalName, prototype);\n      this.currentFilespace.members.set(simpleName, prototype);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, existingExport.element.internalName\n          );\n          return;\n        }\n        prototype.set(CommonFlags.MODULE_EXPORT);\n        this.moduleLevelExports.set(simpleName, <ModuleExport>{\n          element: prototype,\n          identifier: declaration.name\n        });\n      }\n    }\n\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, prototype);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeAccessor(<MethodDeclaration>memberDeclaration, prototype);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, prototype);\n          }\n          break;\n        }\n        default: {\n          throw new Error(\"interface member expected\");\n        }\n      }\n    }\n\n    this.checkGlobal(prototype, declaration);\n  }\n\n  private initializeNamespace(\n    declaration: NamespaceDeclaration,\n    queuedExtends: ClassPrototype[],\n    queuedImplements: ClassPrototype[],\n    parentNamespace: Element | null = null\n  ): void {\n    var internalName = declaration.fileLevelInternalName;\n    var simpleName = declaration.name.text;\n    var namespace = this.elementsLookup.get(internalName);\n    if (!namespace) {\n      namespace = new Namespace(this, simpleName, internalName, declaration);\n      namespace.parent = parentNamespace;\n      this.elementsLookup.set(internalName, namespace);\n      this.checkGlobal(namespace, declaration);\n    }\n\n    if (parentNamespace) {\n      if (parentNamespace.members) {\n        if (parentNamespace.members.has(simpleName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n          return;\n        }\n      } else {\n        parentNamespace.members = new Map();\n      }\n      parentNamespace.members.set(simpleName, namespace);\n      if (parentNamespace.is(CommonFlags.MODULE_EXPORT) && namespace.is(CommonFlags.EXPORT)) {\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    } else if (namespace.is(CommonFlags.EXPORT)) { // no parent namespace\n      let existingExport = this.fileLevelExports.get(internalName);\n      if (existingExport) {\n        if (!existingExport.is(CommonFlags.EXPORT)) {\n          this.error(\n            DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n            declaration.name.range, namespace.internalName\n          ); // recoverable\n        }\n        namespace = existingExport; // join\n      } else {\n        this.fileLevelExports.set(internalName, namespace);\n      }\n      this.currentFilespace.members.set(simpleName, namespace);\n      if (declaration.range.source.isEntry) {\n        if (this.moduleLevelExports.has(simpleName)) {\n          let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n          if (existingExport.element !== namespace) { // not merged\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            return;\n          }\n        } else {\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: namespace,\n            identifier: declaration.name\n          });\n        }\n        namespace.set(CommonFlags.MODULE_EXPORT);\n      }\n    }\n\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      switch (members[i].kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>members[i], namespace);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>members[i], queuedExtends, queuedImplements, namespace);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          // this.initializeTypeAlias(<TypeDeclaration>members[i], namespace);\n          // TODO: what about namespaced types?\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            members[i].range\n          );\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>members[i], namespace);\n          break;\n        }\n        default: {\n          throw new Error(\"namespace member expected\");\n        }\n      }\n    }\n  }\n\n  private initializeTypeAlias(declaration: TypeDeclaration, namespace: Element | null = null): void {\n    // type aliases are program globals\n    // TODO: what about namespaced types?\n    var name = declaration.name.text;\n    if (this.typesLookup.has(name) || this.typeAliases.has(name)) {\n      this.error(\n        DiagnosticCode.Duplicate_identifier_0,\n        declaration.name.range, name\n      );\n      return;\n    }\n    var alias = new TypeAlias();\n    alias.typeParameters = declaration.typeParameters;\n    alias.type = declaration.type;\n    this.typeAliases.set(name, alias);\n  }\n\n  private initializeVariables(statement: VariableStatement, namespace: Element | null = null): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let decorators = declaration.decorators;\n      let internalName = declaration.fileLevelInternalName;\n      if (this.elementsLookup.has(internalName)) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, internalName\n        );\n        continue;\n      }\n      let simpleName = declaration.name.text;\n      let global = new Global(\n        this,\n        simpleName,\n        internalName,\n        Type.void, // resolved later on\n        declaration,\n        decorators\n          ? this.checkDecorators(decorators,\n              DecoratorFlags.GLOBAL |\n              DecoratorFlags.INLINE |\n              DecoratorFlags.EXTERNAL\n            )\n          : DecoratorFlags.NONE\n      );\n      global.parent = namespace;\n      this.elementsLookup.set(internalName, global);\n\n      if (global.hasDecorator(DecoratorFlags.INLINE) && !global.is(CommonFlags.CONST)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, decorators)).range, \"inline\"\n        );\n      }\n\n      if (namespace) {\n        if (namespace.members) {\n          if (namespace.members.has(simpleName)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, internalName\n            );\n            continue;\n          }\n        } else {\n          namespace.members = new Map();\n        }\n        namespace.members.set(simpleName, global);\n        if (namespace.is(CommonFlags.MODULE_EXPORT) && global.is(CommonFlags.EXPORT)) {\n          global.set(CommonFlags.MODULE_EXPORT);\n        }\n      } else if (global.is(CommonFlags.EXPORT)) { // no namespace\n        if (this.fileLevelExports.has(internalName)) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range, internalName\n          );\n        } else {\n          this.fileLevelExports.set(internalName, global);\n        }\n        this.currentFilespace.members.set(simpleName, global);\n        if (declaration.range.source.isEntry) {\n          if (this.moduleLevelExports.has(simpleName)) {\n            let existingExport = <ModuleExport>this.moduleLevelExports.get(simpleName);\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, existingExport.element.internalName\n            );\n            continue;\n          }\n          global.set(CommonFlags.MODULE_EXPORT);\n          this.moduleLevelExports.set(simpleName, <ModuleExport>{\n            element: global,\n            identifier: declaration.name\n          });\n        }\n      }\n      this.checkGlobal(global, declaration);\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link Filespace}. */\n  FILESPACE,\n}\n\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8\n}\n\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Specific element kind. */\n  kind: ElementKind;\n  /** Containing {@link Program}. */\n  program: Program;\n  /** Simple name. */\n  simpleName: string;\n  /** Internal name referring to this element. */\n  internalName: string;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Namespaced member elements. */\n  members: Map<string,Element> | null = null;\n  /** Parent element, if applicable. */\n  parent: Element | null = null;\n\n  /** Constructs a new element, linking it to its containing {@link Program}. */\n  protected constructor(program: Program, simpleName: string, internalName: string) {\n    this.program = program;\n    this.simpleName = simpleName;\n    this.internalName = internalName;\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n}\n\n/** A filespace representing the implicit top-level namespace of a source. */\nexport class Filespace extends Element {\n\n  kind = ElementKind.FILESPACE;\n\n  /** File members (externally visible only). */\n  members: Map<string,Element>; // more specific\n\n  /** Constructs a new filespace. */\n  constructor(\n    program: Program,\n    source: Source\n  ) {\n    super(program, source.internalPath, FILESPACE_PREFIX + source.internalPath);\n    this.members = new Map();\n  }\n}\n\n/** A namespace that differs from a filespace in being user-declared with a name. */\nexport class Namespace extends Element {\n\n  // All elements have namespace semantics. This is an explicitly declared one.\n  kind = ElementKind.NAMESPACE;\n\n  /** Declaration reference. */\n  declaration: NamespaceDeclaration; // more specific\n\n  /** Constructs a new namespace. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: NamespaceDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum. */\nexport class Enum extends Element {\n\n  kind = ElementKind.ENUM;\n\n  /** Declaration reference. */\n  declaration: EnumDeclaration;\n\n  /** Constructs a new enum. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends Element {\n\n  kind = ElementKind.ENUMVALUE;\n\n  /** Declaration reference. */\n  declaration: EnumValueDeclaration;\n  /** Constant value, if applicable. */\n  constantValue: i32 = 0;\n\n  constructor(\n    enm: Enum,\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: EnumValueDeclaration\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = enm;\n    this.declaration = declaration;\n  }\n}\n\nexport const enum ConstantValueKind {\n  NONE,\n  INTEGER,\n  FLOAT\n}\n\nexport class VariableLikeElement extends Element {\n\n  // kind varies\n\n  /** Declaration reference. */\n  declaration: VariableLikeDeclarationStatement | null;\n  /** Variable type. Is {@link Type.void} for type-inferred {@link Global}s before compilation. */\n  type: Type;\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  protected constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null\n  ) {\n    super(program, simpleName, internalName);\n    this.type = type;\n    this.declaration = declaration;\n  }\n\n  withConstantIntegerValue(value: I64): this {\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n\n  withConstantFloatValue(value: f64): this {\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED);\n    return this;\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  kind = ElementKind.GLOBAL;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, type, declaration);\n    this.flags = declaration ? declaration.flags : CommonFlags.NONE;\n    this.decoratorFlags = decoratorFlags;\n    this.type = type; // resolved later if `void`\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n\n  // not an Element on its own\n\n  /** Parameter name. */\n  name: string;\n  /** Parameter type. */\n  type: Type;\n  /** Parameter initializer. */\n  initializer: Expression | null;\n\n  /** Constructs a new function parameter. */\n  constructor(name: string, type: Type, initializer: Expression | null = null) {\n    this.name = name;\n    this.type = type;\n    this.initializer = initializer;\n  }\n}\n\n/** A function local. */\nexport class Local extends VariableLikeElement {\n\n  kind = ElementKind.LOCAL;\n\n  /** Local index. */\n  index: i32;\n  /** Respective scoped global, if any. */\n  scopedGlobal: Global | null = null;\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    index: i32,\n    type: Type,\n    declaration: VariableLikeDeclarationStatement | null = null\n  ) {\n    super(program, simpleName, simpleName, type, declaration);\n    this.index = index;\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends Element {\n\n  kind = ElementKind.FUNCTION_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FunctionDeclaration;\n  /** If an instance method, the class prototype reference. */\n  classPrototype: ClassPrototype | null;\n  /** Resolved instances. */\n  instances: Map<string,Function> = new Map();\n  /** Class type arguments, if a partially resolved method of a generic class. Not set otherwise. */\n  classTypeArguments: Type[] | null = null;\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: FunctionDeclaration,\n    classPrototype: ClassPrototype | null = null,\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.classPrototype = classPrototype;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string { return this.simpleName; }\n}\n\n/** A resolved function. */\nexport class Function extends Element {\n\n  kind = ElementKind.FUNCTION;\n\n  /** Prototype reference. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Current break context label. */\n  breakContext: string | null = null;\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Current control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n  /** The outer scope, if a function expression. */\n  outerScope: Flow | null = null;\n\n  private nextBreakId: i32 = 0;\n  private breakStack: i32[] | null = null;\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    prototype: FunctionPrototype,\n    internalName: string,\n    signature: Signature,\n    parent: Element | null = null,\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(prototype.program, prototype.simpleName, internalName);\n    this.prototype = prototype;\n    this.signature = signature;\n    this.parent = parent;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    if (!(prototype.is(CommonFlags.AMBIENT))) {\n      let localIndex = 0;\n      if (parent && parent.kind == ElementKind.CLASS) {\n        assert(this.is(CommonFlags.INSTANCE));\n        let local = new Local(\n          prototype.program,\n          \"this\",\n          localIndex++,\n          assert(signature.thisType)\n        );\n        this.localsByName.set(\"this\", local);\n        this.localsByIndex[local.index] = local;\n        let inheritedTypeArguments = (<Class>parent).contextualTypeArguments;\n        if (inheritedTypeArguments) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n            if (!this.contextualTypeArguments.has(inheritedName)) {\n              this.contextualTypeArguments.set(inheritedName, inheritedType);\n            }\n          }\n        }\n      } else {\n        assert(!this.is(CommonFlags.INSTANCE)); // internal error\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          prototype.program,\n          parameterName,\n          localIndex++,\n          parameterType\n          // FIXME: declaration?\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var local = new Local(\n      this.prototype.program,\n      name\n        ? name\n        : \"var$\" + localIndex.toString(10),\n      localIndex,\n      type,\n      declaration\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  private tempI32s: Local[] | null = null;\n  private tempI64s: Local[] | null = null;\n  private tempF32s: Local[] | null = null;\n  private tempF64s: Local[] | null = null;\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s;\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s;\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s;\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s;\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = this.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = this.tempI32s || (this.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = this.tempI64s || (this.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = this.tempF32s || (this.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = this.tempF64s || (this.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = this.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.flow.setLocalWrapped(local.index, wrapped);\n    }\n    return local;\n  }\n\n  /** Enters a(nother) break context. */\n  enterBreakContext(): string {\n    var id = this.nextBreakId++;\n    if (!this.breakStack) this.breakStack = [ id ];\n    else this.breakStack.push(id);\n    return this.breakContext = id.toString(10);\n  }\n\n  /** Leaves the current break context. */\n  leaveBreakContext(): void {\n    assert(this.breakStack != null);\n    var length = (<i32[]>this.breakStack).length;\n    assert(length > 0);\n    (<i32[]>this.breakStack).pop();\n    if (length > 1) {\n      this.breakContext = (<i32[]>this.breakStack)[length - 2].toString(10);\n    } else {\n      this.breakContext = null;\n      this.breakStack = null;\n    }\n  }\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakContext = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n\n  /** Returns the TypeScript representation of this function. */\n  toString(): string { return this.prototype.simpleName; }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  kind = ElementKind.FUNCTION_TARGET;\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(program: Program, signature: Signature) {\n    super(program, \"\", \"\");\n    var simpleName = signature.toSignatureString();\n    this.simpleName = simpleName;\n    this.internalName = simpleName;\n    this.signature = signature;\n    this.type = Type.u32.asFunction(signature);\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends Element {\n\n  kind = ElementKind.FIELD_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: FieldDeclaration;\n  /** Parent class prototype. */\n  classPrototype: ClassPrototype;\n\n  /** Constructs a new field prototype. */\n  constructor(\n    classPrototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    declaration: FieldDeclaration\n  ) {\n    super(classPrototype.program, simpleName, internalName);\n    this.classPrototype = classPrototype;\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  kind = ElementKind.FIELD;\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    prototype: FieldPrototype,\n    internalName: string,\n    type: Type,\n    declaration: FieldDeclaration,\n    parent: Class\n  ) {\n    super(prototype.program, prototype.simpleName, internalName, type, declaration);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.type = type;\n    this.parent = parent;\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class Property extends Element {\n\n  kind = ElementKind.PROPERTY;\n\n  /** Parent class prototype. */\n  parent: ClassPrototype;\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    parent: ClassPrototype\n  ) {\n    super(program, simpleName, internalName);\n    this.parent = parent;\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends Element {\n\n  kind = ElementKind.CLASS_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: ClassDeclaration;\n  /** Resolved instances. */\n  instances: Map<string,Class> = new Map();\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: ClassDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName);\n    this.declaration = declaration;\n    this.flags = declaration.flags;\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A resolved class. */\nexport class Class extends Element {\n\n  kind = ElementKind.CLASS;\n\n  /** Prototype reference. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Resolved class type. */\n  type: Type;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    prototype: ClassPrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] | null = null,\n    base: Class | null = null\n  ) {\n    super(prototype.program, simpleName, internalName);\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.type = prototype.program.options.usizeType.asClass(this);\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          this.contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply instance-specific contextual type arguments\n    var declaration = this.prototype.declaration;\n    var i: i32, k: i32;\n    if (declaration) { // irrelevant for built-ins\n      let typeParameters = declaration.typeParameters;\n      if (typeArguments) {\n        if ((k = typeArguments.length) != typeParameters.length) {\n          throw new Error(\"type argument count mismatch\");\n        }\n        if (k) {\n          if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n          for (i = 0; i < k; ++i) {\n            this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n          }\n        }\n      } else if (typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n    }\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  toString(): string {\n    return this.simpleName;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype {\n\n  kind = ElementKind.INTERFACE_PROTOTYPE;\n\n  /** Declaration reference. */\n  declaration: InterfaceDeclaration; // more specific\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    program: Program,\n    simpleName: string,\n    internalName: string,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(program, simpleName, internalName, declaration, decoratorFlags);\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class {\n\n  kind = ElementKind.INTERFACE;\n\n  /** Prototype reference. */\n  prototype: InterfacePrototype; // more specific\n  /** Base interface, if applcable. */\n  base: Interface | null; // more specific\n\n  /** Constructs a new interface. */\n  constructor(\n    prototype: InterfacePrototype,\n    simpleName: string,\n    internalName: string,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(prototype, simpleName, internalName, typeArguments, base);\n  }\n}\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This branch always returns. */\n  RETURNS = 1 << 0,\n  /** This branch always returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This branch always throws. */\n  THROWS = 1 << 2,\n  /** This branch always breaks. */\n  BREAKS = 1 << 3,\n  /** This branch always continues. */\n  CONTINUES = 1 << 4,\n  /** This branch always allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n\n  // conditional\n\n  /** This branch conditionally returns in a child branch. */\n  CONDITIONALLY_RETURNS = 1 << 6,\n  /** This branch conditionally throws in a child branch. */\n  CONDITIONALLY_THROWS = 1 << 7,\n  /** This branch conditionally breaks in a child branch. */\n  CONDITIONALLY_BREAKS = 1 << 8,\n  /** This branch conditionally continues in a child branch. */\n  CONDITIONALLY_CONTINUES = 1 << 9,\n  /** This branch conditionally allocates in a child branch. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 10,\n\n  // special\n\n  /** This branch is part of inlining a function. */\n  INLINE_CONTEXT = 1 << 11,\n  /** This branch explicitly requests no bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 12,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  currentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  returnLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(currentFunction: Function): Flow {\n    var parentFlow = new Flow();\n    parentFlow.parent = null;\n    parentFlow.flags = FlowFlags.NONE;\n    parentFlow.currentFunction = currentFunction;\n    parentFlow.continueLabel = null;\n    parentFlow.breakLabel = null;\n    parentFlow.returnLabel = null;\n    parentFlow.returnType = currentFunction.signature.returnType;\n    parentFlow.contextualTypeArguments = currentFunction.contextualTypeArguments;\n    parentFlow.wrappedLocals = i64_new(0);\n    parentFlow.wrappedLocalsExt = null;\n    return parentFlow;\n  }\n\n  private constructor() { }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.currentFunction = this.currentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnLabel = this.returnLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    return branch;\n  }\n\n  /** Frees this flow's scoped variables. */\n  free(): Flow {\n    var parent = assert(this.parent);\n    if (this.scopedLocals) { // free block-scoped locals\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n    return parent;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(type: Type, name: string, wrapped: bool, declaration?: VariableDeclaration): Local {\n    var scopedLocal = this.currentFunction.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. */\n  addScopedLocalAlias(index: i32, type: Type, name: string): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        let declaration = existingLocal.declaration;\n        if (declaration) {\n          this.currentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range\n          );\n        } else assert(false);\n        return existingLocal;\n      }\n    }\n    assert(index < this.currentFunction.localsByIndex.length);\n    var scopedAlias = new Local( // not SCOPED as an indicator that it isn't automatically free'd\n      this.currentFunction.program,\n      name,\n      index,\n      type,\n      null\n    );\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Gets the local of the specified name in the current scope. */\n  getScopedLocal(name: string): Local | null {\n    var local: Local | null;\n    var current: Flow | null = this;\n    do {\n      if (current.scopedLocals && (local = current.scopedLocals.get(name))) {\n        return local;\n      }\n    } while (current = current.parent);\n    return this.currentFunction.localsByName.get(name);\n  }\n\n  /** Tests if the local with the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    var map: I64;\n    var ext: I64[] | null;\n    if (index < 64) {\n      if (index < 0) return true; // inlined constant\n      map = this.wrappedLocals;\n    } else if (ext = this.wrappedLocalsExt) {\n      let i = ((index - 64) / 64) | 0;\n      if (i >= ext.length) return false;\n      map = ext[i];\n      index -= (i + 1) * 64;\n    } else {\n      return false;\n    }\n    return i64_ne(\n      i64_and(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      ),\n      i64_zero\n    );\n  }\n\n  /** Sets if the local with the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    var map: I64;\n    var off: i32 = -1;\n    if (index < 64) {\n      if (index < 0) return; // inlined constant\n      map = this.wrappedLocals;\n    } else {\n      let ext = this.wrappedLocalsExt;\n      off = ((index - 64) / 64) | 0;\n      if (!ext) {\n        this.wrappedLocalsExt = ext = new Array(off + 1);\n        ext.length = 0;\n      }\n      while (ext.length <= off) ext.push(i64_new(0));\n      map = ext[off];\n      index -= (off + 1) * 64;\n    }\n    map = wrapped\n      ? i64_or(\n          map,\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      : i64_and(\n          map,\n          i64_not(\n            i64_shl(\n              i64_one,\n              i64_new(index)\n            )\n          )\n        );\n    if (off >= 0) (<I64[]>this.wrappedLocalsExt)[off] = map;\n    else this.wrappedLocals = map;\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possibly combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let currentFunction = this.currentFunction;\n        let local = currentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !currentFunction.flow.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: {\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // never overflows because globals are wrapped on set\n      case ExpressionId.GetGlobal: return false;\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        // actually, brs with a value that'd be handled here is not emitted atm\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.currentFunction.program;\n        let instance = assert(program.instancesLookup.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  /** Finalizes this flow. Must be the topmost parent flow of the function. */\n  finalize(): void {\n    assert(this.parent == null); // must be the topmost parent flow\n    this.continueLabel = null;\n    this.breakLabel = null;\n    this.returnLabel = null;\n    this.contextualTypeArguments = null;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  var fromSize = fromType.byteSize;\n  var toSize = toType.byteSize;\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromSize > toSize\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type Index = u32;\n\nexport const enum NativeType {\n  None = 0,        // _BinaryenTypeNone(),\n  I32  = 1,        // _BinaryenTypeInt32(),\n  I64  = 2,        // _BinaryenTypeInt64(),\n  F32  = 3,        // _BinaryenTypeFloat32(),\n  F64  = 4,        // _BinaryenTypeFloat64(),\n  Unreachable = 5, // _BinaryenTypeUnreachable(),\n  Auto = -1        // _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallImport = _BinaryenCallImportId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  PageSize = _BinaryenPageSize(),\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n  HasFeature = _BinaryenHasFeature(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private cachedByValue: usize;\n\n  /** Maximum number of pages when targeting WASM32. */\n  static readonly MAX_MEMORY_WASM32: Index = 0xffff;\n\n  /** Maximum number of pages when targeting WASM64. */\n  static readonly MAX_MEMORY_WASM64: Index = 0xffff; // TODO\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.cachedByValue = memory.allocate(16);\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.cachedByValue = memory.allocate(3 * 8); // LLVM C-ABI, max used is 3 * usize\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunctionType(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.cachedByValue;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenGetGlobal(this.ref, cStr, type);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenSetGlobal(this.ref, cStr, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenBreak(this.ref, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = allocString(label);\n    try {\n      return _BinaryenLoop(this.ref, cStr, body);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = allocString(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = allocString(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n      for (let i = numNames - 1; i >= 0; --i) memory.free(strs[i]);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallImport(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = allocString(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallImport(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var cStr = allocString(typeName);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cStr);\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = allocString(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n      memory.free(cStr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = allocString(name);\n    try {\n      _BinaryenRemoveFunction(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  private cachedTemporaryName: usize = 0;\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.cachedTemporaryName;\n    if (!tempName) this.cachedTemporaryName = tempName = allocString(\"\"); // works because strings are interned\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = assert(this.cachedTemporaryName);\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalName);\n    try {\n      return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n    } finally {\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = allocString(externalName);\n    try {\n      _BinaryenRemoveExport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = allocString(internalName);\n    var cStr2 = allocString(externalModuleName);\n    var cStr3 = allocString(externalBaseName);\n    try {\n      return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n    } finally {\n      memory.free(cStr3);\n      memory.free(cStr2);\n      memory.free(cStr1);\n    }\n  }\n\n  removeImport(internalName: string): void {\n    var cStr = allocString(internalName);\n    try {\n      _BinaryenRemoveImport(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null\n  ): void {\n    var cStr = allocString(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n      memory.free(cStr);\n    }\n  }\n\n  setFunctionTable(funcs: FunctionRef[]): void {\n    var cArr = allocPtrArray(funcs);\n    try {\n      _BinaryenSetFunctionTable(this.ref, cArr, funcs.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeName: usize = 0; // for free'ing\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      let name = allocString(\"precompute\");\n      this.cachedPrecomputeName = name;\n      this.cachedPrecomputeNames = names = allocI32Array([ name ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.cachedByValue;\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    memory.free(this.cachedByValue);\n    memory.free(this.cachedTemporaryName);\n    memory.free(this.cachedPrecomputeName);\n    memory.free(this.cachedPrecomputeNames);\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate();\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(from: RelooperBlockRef, to: RelooperBlockRef, condition: ExpressionRef = 0, code: ExpressionRef = 0): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(from: RelooperBlockRef, to: RelooperBlockRef, indexes: i32[], code: ExpressionRef = 0): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper, this.module.ref);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9\n}\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (!signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.toString() + \" | null\"\n          : classReference.toString();\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.VOID: return \"v\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (isDecimalDigit(text.charCodeAt(this.pos))) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              text.charCodeAt(this.pos) == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            if (text.charCodeAt(this.pos) == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (text.charCodeAt(this.pos) == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken != Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.PREFER);\n  }\n\n  skipIdentifierName(): bool {\n    return this.skip(Token.IDENTIFIER, IdentifierHandling.ALWAYS);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.SLASH && !escaped) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 1 < this.end) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.X:\n        case CharCode.x:\n        case CharCode.B:\n        case CharCode.b:\n        case CharCode.O:\n        case CharCode.o: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.E || c == CharCode.e) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.X:\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.B:\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.O:\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_16 = i64_new(16, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 16 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(c - CharCode._0, 0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = value * 16 + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.A, 0)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = value * 16 + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_mul(value, i64_16),\n          i64_new(10 + c - CharCode.a, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_10 = i64_new(10, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_8 = i64_new(8, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = value * 8 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_8),\n          i64_new(c - CharCode._0, 0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0, 0);\n    var i64_2 = i64_new(2, 0);\n    var i64_1 = i64_new(1, 0);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = value * 2;\n        value = i64_mul(\n          value,\n          i64_2\n        );\n      } else if (c == CharCode._1) {\n        // value = value * 2 + 1;\n        value = i64_add(\n          i64_mul(value, i64_2),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.E || c == CharCode.e) {\n        if (\n          ++this.pos < this.end && (\n            text.charCodeAt(this.pos) == CharCode.MINUS ||\n            text.charCodeAt(this.pos) == CharCode.PLUS\n          ) &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = value * 16 + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = value * 16 + 10 + c - CharCode.A;\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = value * 16 + 10 + c - CharCode.a;\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        (((value32 - 65536) / 1024 | 0) + 0xD800) as i32,\n        ( (value32 - 65536) % 1024      + 0xDC00) as i32\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAllocate,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getGetLocalIndex,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  INNER_DELIMITER,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  Namespace,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  FlowFlags,\n  ConstantValueKind,\n  Flow,\n  OperatorKind,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Source,\n  Range,\n  DecoratorKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FunctionDeclaration,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableDeclaration,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n  FieldDeclaration,\n\n  nodeIsConstantValue,\n  isLastStatement,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, compiles everything instead of just reachable code. */\n  noTreeShaking: bool = false;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1  // see: https://github.com/WebAssembly/mutable-global\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current function in compilation. */\n  currentFunction: Function;\n  /** Current outer function in compilation, if compiling a function expression. */\n  currentOuterFunction: Function | null = null;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function being compiled. */\n  startFunctionInstance: Function;\n  /** Start function statements. */\n  startFunctionBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: FunctionRef[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the start function\n    var startFunctionInstance = new Function(program.startFunction, \"start\", new Signature([], Type.void));\n    this.startFunctionInstance = startFunctionInstance;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.startFunctionBody = startFunctionBody;\n    this.currentFunction = startFunctionInstance;\n\n    // compile entry file(s) while traversing reachable elements\n    var sources = program.sources;\n    for (let i = 0, k = sources.length; i < k; ++i) {\n      if (sources[i].isEntry) this.compileSource(sources[i]);\n    }\n\n    // compile the start function if not empty or called by main\n    if (startFunctionBody.length || program.mainFunction !== null) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!program.mainFunction) module.setStart(funcRef);\n    }\n\n    // set up static memory segments and the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    if (options.isWasm64) {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        \"HEAP_BASE\",\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // determine initial page size\n    var numPages = this.memorySegments.length\n      ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n      : 0;\n    module.setMemory(\n      numPages,\n      this.options.isWasm64\n        ? Module.MAX_MEMORY_WASM64\n        : Module.MAX_MEMORY_WASM32,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\");\n\n    // set up function table\n    var functionTable = this.functionTable;\n    var functionTableSize = functionTable.length;\n    var functionTableExported = false;\n    if (functionTableSize) {\n      module.setFunctionTable(functionTable);\n      module.addTableExport(\"0\", \"table\");\n      functionTableExported = true;\n    }\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) {\n      module.addTableImport(\"0\", \"env\", \"table\");\n      if (!functionTableExported) module.addTableExport(\"0\", \"table\");\n    }\n\n    // set up module exports\n    for (let [name, moduleExport] of program.moduleLevelExports) {\n      this.makeModuleExport(name, moduleExport.element);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (element.kind == ElementKind.NAMESPACE) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.simpleName, member, subPrefix);\n        }\n      }\n    }\n\n    switch (element.kind) {\n\n      // export global\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<Global>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          let declaration = (<EnumValue>element).declaration;\n          if (declaration) {\n            this.error(\n              DiagnosticCode.Cannot_export_a_mutable_global,\n              declaration.name.range\n            );\n          }\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n\n      // export function\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n\n      // export getter and setter\n      case ElementKind.PROPERTY: {\n        let getter = assert((<Property>element).getterPrototype);\n        this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterPrototype;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export a getter and a setter\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // skip prototype and export instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        for (let instance of (<FunctionPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        for (let instance of (<ClassPrototype>element).instances.values()) {\n          let instanceName = name;\n          if (instance.is(CommonFlags.GENERIC)) {\n            let fullName = instance.internalName;\n            instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n          }\n          let ctor = instance.constructorInstance;\n          if (ctor) this.makeModuleExport(instanceName + INSTANCE_DELIMITER + ctor.simpleName, ctor, prefix);\n          this.makeModuleExport(instanceName, instance, prefix);\n        }\n        break;\n      }\n\n      // all possible members already handled above\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE: break;\n\n      default: assert(false);\n    }\n  }\n\n  // sources\n\n  /** Compiles a source by looking it up by path first. */\n  compileSourceByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var source = this.program.lookupSourceByPath(normalizedPathWithoutExtension);\n    if (source) this.compileSource(source);\n    else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n    }\n  }\n\n  /** Compiles a source. */\n  compileSource(source: Source): void {\n    if (source.is(CommonFlags.COMPILED)) return;\n    source.set(CommonFlags.COMPILED);\n\n    // compile top-level statements\n    var noTreeShaking = this.options.noTreeShaking;\n    var isEntry = source.isEntry;\n    var startFunctionInstance = this.startFunctionInstance;\n    var startFunctionBody = this.startFunctionBody;\n    var statements = source.statements;\n    for (let i = 0, k = statements.length; i < k; ++i) {\n      let statement = statements[i];\n      switch (statement.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<ClassDeclaration>statement).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>statement, [], null);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: break;\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileEnumDeclaration(<EnumDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) &&\n            !(<FunctionDeclaration>statement).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>statement, []);\n          }\n          break;\n        }\n        case NodeKind.IMPORT: {\n          this.compileSourceByPath(\n            (<ImportStatement>statement).normalizedPath,\n            (<ImportStatement>statement).path\n          );\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || (isEntry && statement.is(CommonFlags.EXPORT))) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>statement);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: { // global, always compiled as initializers might have side effects\n          let variableInit = this.compileVariableStatement(<VariableStatement>statement);\n          if (variableInit) startFunctionBody.push(variableInit);\n          break;\n        }\n        case NodeKind.EXPORT: {\n          if ((<ExportStatement>statement).normalizedPath != null) {\n            this.compileSourceByPath(\n              <string>(<ExportStatement>statement).normalizedPath,\n              <StringLiteralExpression>(<ExportStatement>statement).path\n            );\n          }\n          if (noTreeShaking || isEntry) {\n            this.compileExportStatement(<ExportStatement>statement);\n          }\n          break;\n        }\n        default: { // otherwise a top-level statement that is part of the start function's body\n          let previousFunction = this.currentFunction;\n          this.currentFunction = startFunctionInstance;\n          startFunctionBody.push(this.compileStatement(statement));\n          this.currentFunction = previousFunction;\n          break;\n        }\n      }\n    }\n  }\n\n  // globals\n\n  compileGlobalDeclaration(declaration: VariableDeclaration): Global | null {\n    // look up the initialized program element\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.GLOBAL);\n    if (!this.compileGlobal(<Global>element)) return null; // reports\n    return <Global>element;\n  }\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var declaration = global.declaration;\n    var initExpr: ExpressionRef = 0;\n\n    if (global.type == Type.void) { // type is void if not yet resolved or not annotated\n      if (declaration) {\n\n        // resolve now if annotated\n        if (declaration.type) {\n          let resolvedType = this.resolver.resolveType(declaration.type); // reports\n          if (!resolvedType) return false;\n          if (resolvedType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              declaration.type.range\n            );\n            return false;\n          }\n          global.type = resolvedType;\n\n        // infer from initializer if not annotated\n        } else if (declaration.initializer) { // infer type using void/NONE for literal inference\n          initExpr = this.compileExpressionRetainType( // reports\n            declaration.initializer,\n            Type.void,\n            WrapMode.WRAP\n          );\n          if (this.currentType == Type.void) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              declaration.initializer.range, this.currentType.toString(), \"<auto>\"\n            );\n            return false;\n          }\n          global.type = this.currentType;\n\n        // must either be annotated or have an initializer\n        } else {\n          this.error(\n            DiagnosticCode.Type_expected,\n            declaration.name.range.atEnd\n          );\n          return false;\n        }\n      } else {\n        assert(false); // must have a declaration if 'void' (and thus resolved later on)\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        if (declaration) {\n          mangleImportName(global, declaration, global.parent);\n        } else {\n          mangleImportName_moduleName = \"env\";\n          mangleImportName_elementName = global.simpleName;\n        }\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          assert(declaration).range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (declaration !== null && declaration.initializer !== null) {\n      if (!initExpr) {\n        initExpr = this.compileExpression(\n          declaration.initializer,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.startFunctionBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnumDeclaration(declaration: EnumDeclaration): Enum | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.ENUM);\n    if (!this.compileEnum(<Enum>element)) return null;\n    return <Enum>element;\n  }\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueDeclaration = val.declaration;\n        val.set(CommonFlags.COMPILED);\n        let initExpr: ExpressionRef;\n        if (valueDeclaration.value) {\n          initExpr = this.compileExpression(\n            <Expression>valueDeclaration.value,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueDeclaration.value.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              valueDeclaration.range\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                valueDeclaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.startFunctionBody.push(module.createSetGlobal(val.internalName, initExpr));\n          previousValueIsMut = true;\n        } else {\n          module.addGlobal(val.internalName, NativeType.I32, !element.is(CommonFlags.CONST), initExpr);\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Compiles a top-level function given its declaration. */\n  compileFunctionDeclaration(\n    declaration: FunctionDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): Function | null {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n    return this.compileFunctionUsingTypeArguments( // reports\n      <FunctionPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      null, // no outer scope (is top level)\n      (<FunctionPrototype>element).declaration.name\n    );\n  }\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null,\n    outerScope: Flow | null,\n    reportNode: Node\n  ): Function | null {\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      reportNode\n    );\n    if (!instance) return null;\n    instance.outerScope = outerScope;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    // check that modifiers are matching\n    var declaration = instance.prototype.declaration;\n    var body = declaration.body;\n    if (body) {\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          declaration.name.range\n        );\n      }\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          declaration.name.range\n        );\n      }\n    }\n\n    var ref: FunctionRef;\n    var signature = instance.signature;\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n    if (body) {\n      let isConstructor = instance.is(CommonFlags.CONSTRUCTOR);\n      let returnType = instance.signature.returnType;\n\n      // compile body\n      let previousFunction = this.currentFunction;\n      this.currentFunction = instance;\n      let flow = instance.flow;\n      let stmt: ExpressionRef;\n      if (body.kind == NodeKind.EXPRESSION) { // () => expression\n        assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n        assert(instance.is(CommonFlags.ARROW));\n        stmt = this.compileExpression(\n          (<ExpressionStatement>body).expression,\n          returnType,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        flow.set(FlowFlags.RETURNS);\n        if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n        flow.finalize();\n      } else {\n        assert(body.kind == NodeKind.BLOCK);\n        let stmts = this.compileStatements((<BlockStatement>body).statements);\n        if (instance.is(CommonFlags.MAIN)) {\n          module.addGlobal(\"~started\", NativeType.I32, true, module.createI32(0));\n          stmts.unshift(\n            module.createIf(\n              module.createUnary(\n                UnaryOp.EqzI32,\n                module.createGetGlobal(\"~started\", NativeType.I32)\n              ),\n              module.createBlock(null, [\n                module.createCall(\"start\", null, NativeType.None),\n                module.createSetGlobal(\"~started\", module.createI32(1))\n              ])\n            )\n          );\n        }\n        flow.finalize();\n        if (isConstructor) {\n          let nativeSizeType = this.options.nativeSizeType;\n          assert(instance.is(CommonFlags.INSTANCE));\n\n          // implicitly return `this` if the constructor doesn't always return on its own\n          if (!flow.is(FlowFlags.RETURNS)) {\n\n            // if all branches are guaranteed to allocate, skip the final conditional allocation\n            if (flow.is(FlowFlags.ALLOCATES)) {\n              stmts.push(module.createGetLocal(0, nativeSizeType));\n\n            // if not all branches are guaranteed to allocate, also append a conditional allocation\n            } else {\n              let parent = assert(instance.parent);\n              assert(parent.kind == ElementKind.CLASS);\n              stmts.push(module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, declaration.name)\n              ));\n            }\n          }\n\n        // make sure all branches return\n        } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n          this.error(\n            DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n            declaration.signature.returnType.range\n          );\n        }\n        stmt = !stmts.length\n          ? module.createNop()\n          : stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, returnType.toNativeType());\n      }\n      this.currentFunction = previousFunction;\n\n      // create the function\n      ref = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmt\n      );\n\n      // concrete functions cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n    } else {\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, declaration, instance.prototype.parent); // TODO: check for duplicates\n\n      // create the function import\n      ref = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, ref);\n    return true;\n  }\n\n  // namespaces\n\n  compileNamespaceDeclaration(declaration: NamespaceDeclaration): void {\n    var members = declaration.members;\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<ClassDeclaration>member).isGeneric\n          ) {\n            this.compileClassDeclaration(<ClassDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<InterfaceDeclaration>member).isGeneric\n          ) {\n            this.compileInterfaceDeclaration(<InterfaceDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileEnumDeclaration(<EnumDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          if (\n            (noTreeShaking || member.is(CommonFlags.EXPORT)) &&\n            !(<FunctionDeclaration>member).isGeneric\n          ) {\n            this.compileFunctionDeclaration(<FunctionDeclaration>member, []);\n          }\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            this.compileNamespaceDeclaration(<NamespaceDeclaration>member);\n          }\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          if (noTreeShaking || member.is(CommonFlags.EXPORT)) {\n            let variableInit = this.compileVariableStatement(<VariableStatement>member, true);\n            if (variableInit) this.startFunctionBody.push(variableInit);\n          }\n          break;\n        }\n        default: assert(false);\n      }\n    }\n  }\n\n  compileNamespace(ns: Namespace): void {\n    if (!ns.members) return;\n\n    var noTreeShaking = this.options.noTreeShaking;\n    for (let element of ns.members.values()) {\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking ||\n              (<ClassPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<ClassPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            (\n              noTreeShaking || (<FunctionPrototype>element).is(CommonFlags.EXPORT)\n            ) && !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n          ) {\n            if (element.hasDecorator(DecoratorFlags.BUILTIN)) break;\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // exports\n\n  compileExportStatement(statement: ExportStatement): void {\n    var fileLevelExports = this.program.fileLevelExports;\n    var members = statement.members;\n    if (!members) return; // filespace\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      let element = fileLevelExports.get(\n        statement.range.source.internalPath + PATH_DELIMITER + member.externalName.text\n      );\n      if (!element) continue; // reported in Program#initialize\n      switch (element.kind) {\n        case ElementKind.CLASS_PROTOTYPE: {\n          if (!(<ClassPrototype>element).is(CommonFlags.GENERIC)) {\n            this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n          }\n          break;\n        }\n        case ElementKind.ENUM: {\n          this.compileEnum(<Enum>element);\n          break;\n        }\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          if (\n            !(<FunctionPrototype>element).is(CommonFlags.GENERIC) &&\n            statement.range.source.isEntry\n          ) {\n            this.compileFunctionUsingTypeArguments(\n              <FunctionPrototype>element,\n              [],\n              null, // no contextual type arguments\n              null, // no outer scope\n              (<FunctionPrototype>element).declaration.name\n            );\n          }\n          break;\n        }\n        case ElementKind.GLOBAL: {\n          this.compileGlobal(<Global>element);\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          this.compileNamespace(<Namespace>element);\n          break;\n        }\n      }\n    }\n  }\n\n  // classes\n\n  compileClassDeclaration(\n    declaration: ClassDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null\n  ): void {\n    var element = assert(this.program.elementsLookup.get(declaration.fileLevelInternalName));\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    this.compileClassUsingTypeArguments(\n      <ClassPrototype>element,\n      typeArguments,\n      contextualTypeArguments,\n      declaration\n    );\n  }\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n\n    var staticMembers = instance.prototype.members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [], null, null,\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], null, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], null, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                instance.contextualTypeArguments,\n                null, // no outer scope\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [], instance.contextualTypeArguments, null,\n                getter.declaration.name\n              );\n            }\n            let setter = (<Property>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [], instance.contextualTypeArguments, null,\n                setter.declaration.name\n              );\n            }\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.ref);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileStatement(statement: Statement): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // type declarations must be top-level because function bodies are evaluated when\n        // reachaable only.\n        if (this.currentFunction == this.startFunctionInstance) {\n          return module.createNop();\n        }\n        // otherwise fall-through\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[]): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFunction.flow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i]);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var parentFlow = this.currentFunction.flow;\n    var flow = parentFlow.fork();\n    this.currentFunction.flow = flow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    this.currentFunction.flow = flow.free();\n    parentFlow.inherit(flow);\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFunction.flow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFunction.flow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    parentFlow.inherit(flow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = flow.breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    var usesContinue = flow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileStatement(ifTrue)\n          : ifFalse\n            ? this.compileStatement(ifFalse)\n            : module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Each arm initiates a branch\n    var parentFlow = currentFunction.flow;\n    var ifTrueFlow = parentFlow.fork();\n    currentFunction.flow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    currentFunction.flow = ifTrueFlow.free();\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = parentFlow.fork();\n      currentFunction.flow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      currentFunction.flow = ifFalseFlow.free();\n      parentFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      parentFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var expr: ExpressionRef = 0;\n    var flow = currentFunction.flow;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      let returnType = flow.returnType;\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        currentFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatement(statement)) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    return flow.is(FlowFlags.INLINE_CONTEXT)\n      ? module.createBreak(assert(flow.returnLabel), 0, expr)\n      : module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var context = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = currentFunction.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    currentFunction.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let flow = parentFlow.fork();\n      currentFunction.flow = flow;\n      let breakLabel = \"break|\" + context;\n      flow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!flow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!flow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!flow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!flow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      flow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      currentFunction.flow = flow.free();\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    currentFunction.leaveBreakContext();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) parentFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) parentFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) parentFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) parentFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFunction.flow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO\n    // can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /**\n   * Compiles a variable statement. Returns `0` if an initializer is not\n   * necessary.\n   */\n  compileVariableStatement(statement: VariableStatement, isKnownGlobal: bool = false): ExpressionRef {\n    var program = this.program;\n    var currentFunction = this.currentFunction;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n\n    // top-level variables and constants become globals\n    if (isKnownGlobal || (\n      currentFunction == this.startFunctionInstance &&\n      statement.parent && statement.parent.kind == NodeKind.SOURCE\n    )) {\n      // NOTE that the above condition also covers top-level variables declared with 'let', even\n      // though such variables could also become start function locals if, and only if, not used\n      // within any function declared in the same source, which is unknown at this point. the only\n      // efficient way to deal with this would be to keep track of all occasions it is used and\n      // replace these instructions afterwards, dynamically. (TOOD: what about a Binaryen pass?)\n      for (let i = 0; i < numDeclarations; ++i) {\n        this.compileGlobalDeclaration(declarations[i]);\n      }\n      return 0;\n    }\n\n    // other variables become locals\n    var initializers = new Array<ExpressionRef>();\n    var flow = this.currentFunction.flow;\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(program, name, -1, type);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  )\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local = local.withConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  )\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local = local.withConstantFloatValue(<f64>getConstValueF32(initExpr));\n                break;\n              }\n              case NativeType.F64: {\n                local = local.withConstantFloatValue(getConstValueF64(initExpr));\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = currentFunction.flow.scopedLocals;\n            if (!scopedLocals) currentFunction.flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(type, name, false, declaration); // reports\n        } else {\n          local = currentFunction.addLocal(type, name, declaration); // reports\n        }\n        if (initExpr) {\n          initializers.push(this.compileAssignmentWithValue(declaration.name, initExpr));\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary loops if the condition is constant\n      let condExprPrecomp = module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    // Statements initiate a new branch with its own break context\n    var currentFunction = this.currentFunction;\n    var label = currentFunction.enterBreakContext();\n    var parentFlow = currentFunction.flow;\n    var flow = parentFlow.fork();\n    currentFunction.flow = flow;\n    var breakLabel = \"break|\" + label;\n    flow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    flow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = flow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    currentFunction.flow = flow.free();\n    currentFunction.leaveBreakContext();\n    flow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) parentFlow.inherit(flow);\n    else parentFlow.inheritConditional(flow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    var toType = this.resolver.resolveType( // reports\n      expression.toType,\n      this.currentFunction.flow.contextualTypeArguments\n    );\n    if (!toType) return this.module.createUnreachable();\n    return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Mathf\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.elementsLookup.get(\"Math\");\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(\"pow\") : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Mathf\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.elementsLookup.get(\"Math\");\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(\"mod\") : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          this.makeIsTrueish(leftExpr, this.currentType);\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFunction.flow;\n          let tempLocal = this.currentFunction.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let parent = assert(operatorInstance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg,\n      operatorInstance.hasDecorator(DecoratorFlags.INLINE)\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var currentFunction = this.currentFunction;\n    var target = resolver.resolveExpression(expression, currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let instance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!instance) return this.module.createUnreachable();\n          assert(instance.signature.parameterTypes.length == 1); // parser must guarantee this\n          targetType = instance.signature.parameterTypes[0];\n          break;\n        }\n        this.error(\n          DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n          expression.range, (<Property>target).internalName\n        );\n        return this.module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var target = this.resolver.resolveExpression(expression, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let flow = this.currentFunction.flow;\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        const declaration = (<Field>target).declaration;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            this.currentFunction.is(CommonFlags.CONSTRUCTOR) ||\n            declaration == null ||\n            declaration.initializer != null\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let currentFunction = this.currentFunction;\n          let flow = currentFunction.flow;\n          let tempLocal = currentFunction.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY: {\n        let setterPrototype = (<Property>target).setterPrototype;\n        if (setterPrototype) {\n          let setterInstance = this.resolver.resolveFunction(setterPrototype, null);\n          if (!setterInstance) return module.createUnreachable();\n\n          // call just the setter if the return value isn't of interest\n          if (!tee) {\n            if (setterInstance.is(CommonFlags.INSTANCE)) {\n              let thisExpression = assert(this.resolver.currentThisExpression);\n              let thisExpr = this.compileExpressionRetainType(\n                thisExpression,\n                this.options.usizeType,\n                WrapMode.NONE\n              );\n              return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n            } else {\n              return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n            }\n          }\n\n          // otherwise call the setter first, then the getter\n          let getterPrototype = (<Property>target).getterPrototype;\n          assert(getterPrototype != null); // must have one if there is a setter\n          let getterInstance = this.resolver.resolveFunction(<FunctionPrototype>getterPrototype, null);\n          if (!getterInstance) return module.createUnreachable();\n          let returnType = getterInstance.signature.returnType;\n          let nativeReturnType = returnType.toNativeType();\n          if (setterInstance.is(CommonFlags.INSTANCE)) {\n            let thisExpression = assert(this.resolver.currentThisExpression);\n            let thisExpr = this.compileExpressionRetainType(\n              thisExpression,\n              this.options.usizeType,\n              WrapMode.NONE\n            );\n            let tempLocal = this.currentFunction.getAndFreeTempLocal(returnType, false);\n            let tempLocalIndex = tempLocal.index;\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ // set and remember the target\n                module.createTeeLocal(tempLocalIndex, thisExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(getterInstance, [ // get from remembered target\n                module.createGetLocal(tempLocalIndex, nativeReturnType)\n              ])\n            ], nativeReturnType);\n          } else {\n            // note that this must be performed here because `resolved` is shared\n            return module.createBlock(null, [\n              this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n              this.makeCallDirect(getterInstance)\n            ], nativeReturnType);\n          }\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let currentFunction = this.currentFunction;\n            let tempLocalTarget = currentFunction.getTempLocal(targetType, false);\n            let tempLocalElement = currentFunction.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            this.currentFunction.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var target = this.resolver.resolveExpression(expression.expression, currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            this.currentFunction.flow.contextualTypeArguments,\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameters = assert(prototype.declaration.typeParameters);\n          let numTypeParameters = typeParameters.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameters[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterTypes = prototype.declaration.signature.parameters;\n          let numParameterTypes = parameterTypes.length;\n          let argumentExpressions = expression.arguments;\n          let numArguments = argumentExpressions.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameterTypes; ++i) {\n            let typeNode = parameterTypes[i].type;\n            let name = typeNode.kind == NodeKind.TYPE ? (<TypeNode>typeNode).name.text : null;\n            let argumentExpression = i < numArguments\n              ? argumentExpressions[i]\n              : prototype.declaration.signature.parameters[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameterTypes.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (name !== null && inferredTypes.has(name)) {\n              let inferredType = inferredTypes.get(name);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterTypes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(name, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterTypes[i].type,\n                this.currentFunction.flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameters[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(\n            prototype,\n            null,\n            this.currentFunction.flow.contextualTypeArguments\n          );\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          instance.hasDecorator(DecoratorFlags.INLINE)\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY: {\n        indexArg = this.compileGetter(<Property>target, expression.expression);\n        let type = this.currentType;\n        signature = type.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        this.currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    inline: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (inline) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlineUnchecked(instance, argumentExpressions, reportNode, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlineUnchecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var currentFunction = this.currentFunction;\n    var module = this.module;\n    var declaration = instance.prototype.declaration;\n\n    // Create an empty child flow with its own scope and mark it for inlining\n    var previousFlow = currentFunction.flow;\n    var returnLabel = instance.internalName + \"|inlined.\" + (instance.nextInlineId++).toString(10);\n    var returnType = instance.signature.returnType;\n    var flow = Flow.create(currentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.returnLabel = returnLabel;\n    flow.returnType = returnType;\n    flow.contextualTypeArguments = instance.contextualTypeArguments;\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n    if (thisArg) {\n      let parent = assert(instance.parent);\n      assert(parent.kind == ElementKind.CLASS);\n      if (getExpressionId(thisArg) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(thisArg),\n          (<Class>parent).type,\n          \"this\"\n        );\n      } else {\n        let thisLocal = flow.addScopedLocal((<Class>parent).type, \"this\", false);\n        body.push(\n          module.createSetLocal(thisLocal.index, thisArg)\n        );\n      }\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      if (getExpressionId(paramExpr) == ExpressionId.GetLocal) {\n        flow.addScopedLocalAlias(\n          getGetLocalIndex(paramExpr),\n          parameterTypes[i],\n          signature.getParameterName(i)\n        );\n        // inherits wrap status\n      } else {\n        let argumentLocal = flow.addScopedLocal(\n          parameterTypes[i],\n          signature.getParameterName(i),\n          !flow.canOverflow(paramExpr, parameterTypes[i])\n        );\n        body.push(\n          module.createSetLocal(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    currentFunction.flow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(declaration.signature.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        parameterTypes[i],\n        signature.getParameterName(i),\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    var bodyStatement = assert(declaration.body);\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      let statements = (<BlockStatement>bodyStatement).statements;\n      for (let i = 0, k = statements.length; i < k; ++i) {\n        let stmt = this.compileStatement(statements[i]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          body.push(stmt);\n          if (flow.isAny(FlowFlags.ANY_TERMINATING)) break;\n        }\n      }\n    } else {\n      body.push(this.compileStatement(bodyStatement));\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      for (let scopedLocal of scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          currentFunction.freeTempLocal(scopedLocal);\n        }\n      }\n      flow.scopedLocals = null;\n    }\n    flow.finalize();\n    this.currentFunction.flow = previousFlow;\n    this.currentType = returnType;\n\n    // Check that all branches are terminated\n    if (returnType != Type.void && !flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        declaration.signature.returnType.range\n      );\n      return module.createUnreachable();\n    }\n    return module.createBlock(returnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.declaration.signature.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    var trampolineName = originalName + \"|trampoline\";\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.prototype,\n      trampolineName,\n      trampolineSignature,\n      original.parent,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFunction = this.currentFunction;\n    this.currentFunction = trampoline;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(\"~argc\", NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(\"~argc\", NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFunction = previousFunction;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampolineName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    var internalName = \"~argc\";\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        internalName,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return internalName;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = \"~setargc\";\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.declaration.signature.parameters;\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer !== null && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          this.program.instancesLookup.set(instance.internalName, instance); // so canOverflow can find it\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    if (isCallImport) return module.createCallImport(instance.internalName, operands, returnType.toNativeType());\n    var ret = module.createCall(instance.internalName, operands, returnType.toNativeType());\n    return ret;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccess(expression, this.currentFunction); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFunction.flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(expression: FunctionExpression, contextualType: Type): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var currentFunction = this.currentFunction;\n    var prototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      currentFunction.internalName + INNER_DELIMITER + simpleName,\n      declaration,\n      null,\n      DecoratorFlags.NONE\n    );\n    var flow = currentFunction.flow;\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      flow.contextualTypeArguments,\n      flow,\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            this.currentType = scopedThis.type;\n            return module.createGetLocal(scopedThis.index, scopedThis.type.toNativeType());\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let thisType = (<Class>parent).type;\n          if (currentFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // must be conditional because `this` could have been provided by a derived class\n              this.currentType = thisType;\n              return module.createTeeLocal(0,\n                this.makeConditionalAllocate(<Class>parent, expression)\n              );\n            }\n          }\n          this.currentType = thisType;\n          return module.createGetLocal(0, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = currentFunction.flow;\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.getScopedLocal(\"this\");\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (currentFunction.is(CommonFlags.INSTANCE)) {\n          let parent = assert(currentFunction.parent);\n          assert(parent.kind == ElementKind.CLASS);\n          let base = (<Class>parent).base;\n          if (base) {\n            let superType = base.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      this.currentEnum || currentFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return this.module.createI32((<EnumValue>target).constantValue);\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          currentFunction.flow.contextualTypeArguments\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var type = this.currentType;\n    var isType = this.resolver.resolveType(expression.isType);\n    this.currentType = Type.bool;\n    if (!isType) return module.createUnreachable();\n    return type.is(TypeFlags.NULLABLE) && !isType.is(TypeFlags.NULLABLE)\n      ? type.nonNullableType.isAssignableTo(isType)\n        ? module.createBinary( // not precomputeable\n            type.is(TypeFlags.LONG)\n              ? BinaryOp.NeI64\n              : BinaryOp.NeI32,\n            expr,\n            type.toNativeZero(module)\n          )\n        : module.createI32(0)\n      : module.createI32(type.isAssignableTo(isType, true) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        switch (contextualType.kind) {\n\n          // compile to contextualType if matching\n\n          case TypeKind.I8: {\n            if (i64_is_i8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U8: {\n            if (i64_is_u8(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I16: {\n            if (i64_is_i16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U16: {\n            if (i64_is_u16(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.I32: {\n            if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.U32: {\n            if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.BOOL: {\n            if (i64_is_bool(intValue)) return module.createI32(i64_low(intValue));\n            break;\n          }\n          case TypeKind.ISIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_i32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.USIZE: {\n            if (!this.options.isWasm64) {\n              if (i64_is_u32(intValue)) return module.createI32(i64_low(intValue));\n              break;\n            }\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            return module.createI64(i64_low(intValue), i64_high(intValue));\n          }\n          case TypeKind.F32: {\n            if (i64_is_f32(intValue)) return module.createF32(i64_to_f32(intValue));\n            break;\n          }\n          case TypeKind.F64: {\n            if (i64_is_f64(intValue)) return module.createF64(i64_to_f64(intValue));\n            break;\n          }\n          case TypeKind.VOID: {\n            break; // compiles to best fitting type below, being dropped\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n\n        // otherwise compile to best fitting native type\n\n        if (i64_is_i32(intValue)) {\n          this.currentType = Type.i32;\n          return module.createI32(i64_low(intValue));\n        } else if (i64_is_u32(intValue)) {\n          this.currentType = Type.u32;\n          return module.createI32(i64_low(intValue));\n        } else {\n          this.currentType = Type.i64;\n          return module.createI64(i64_low(intValue), i64_high(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(\"length\"));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(\"byteLength\"));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, pos + arrayInstance.offsetof(\"buffer_\"));\n      writeI32(length, buf, pos + arrayInstance.offsetof(\"length_\"));\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expr = expressions[i]\n        ? this.compileExpression(<Expression>expressions[i], elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(compiledValues[i]);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    if (!arrayPrototype || arrayPrototype.kind != ElementKind.CLASS_PROTOTYPE) return module.createUnreachable();\n    var arrayInstance = this.resolver.resolveClass(<ClassPrototype>arrayPrototype, [ elementType ]);\n    if (!arrayInstance) return module.createUnreachable();\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var currentFunction = this.currentFunction;\n    var tempLocal = currentFunction.getTempLocal(arrayType, false);\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var tempLocal = this.currentFunction.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      compileAllocate(this, classReference, expression)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var options = this.options;\n    var currentFunction = this.currentFunction;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      currentFunction\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        currentFunction.flow.contextualTypeArguments\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        currentFunction.flow.contextualTypeArguments,\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n\n    var expr: ExpressionRef;\n\n    // traverse to the top-most visible constructor\n    var currentClassInstance: Class | null = classInstance;\n    var constructorInstance: Function | null = null;\n    do {\n      constructorInstance = currentClassInstance.constructorInstance;\n      if (constructorInstance) break; // TODO: check visibility\n    } while (currentClassInstance = currentClassInstance.base);\n\n    // if a constructor is present, call it with a zero `this`\n    if (constructorInstance) {\n      expr = this.compileCallDirect(constructorInstance, expression.arguments, expression,\n        options.usizeType.toNativeZero(module)\n      );\n\n    // otherwise simply allocate a new instance and initialize its fields\n    } else {\n      expr = this.makeAllocate(classInstance, expression);\n    }\n\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n\n    var target = this.resolver.resolvePropertyAccess(propertyAccess, this.currentFunction); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static property\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let parent = (<EnumValue>target).parent;\n        assert(parent !== null && parent.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>parent)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          return module.createI32((<EnumValue>target).constantValue);\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY: {// instance property (here: getter)\n        return this.compileGetter(<Property>target, propertyAccess);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).simpleName\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: Property, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      let inline = (instance.decoratorFlags & DecoratorFlags.INLINE) != 0;\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let parent = assert(instance.parent);\n        assert(parent.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr, inline);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0, inline);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<Property>target).simpleName, (<Property>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var currentFunction = this.currentFunction;\n    var parentFlow = currentFunction.flow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    if (\n      !this.options.noTreeShaking ||\n      this.currentFunction.isAny(CommonFlags.GENERIC | CommonFlags.GENERIC_CONTEXT)\n    ) {\n      // Try to eliminate unnecesssary branches if the condition is constant\n      let condExprPrecomp = this.module.precomputeExpression(condExpr);\n      if (\n        getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n        getExpressionType(condExprPrecomp) == NativeType.I32\n      ) {\n        return getConstValueI32(condExprPrecomp)\n          ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n          : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n      // Otherwise recompile to the original and let the optimizer decide\n      } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n        condExpr = this.makeIsTrueish(\n          this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n          this.currentType\n        );\n      }\n    }\n\n    var ifThenFlow = parentFlow.fork();\n    currentFunction.flow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.free();\n\n    var ifElseFlow = parentFlow.fork();\n    currentFunction.flow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    currentFunction.flow = ifElseFlow.free();\n\n    parentFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n    var currentType = this.currentType;\n\n    var op: BinaryOp;\n    var nativeType: NativeType;\n    var nativeOne: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.AddI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.AddI64\n              : BinaryOp.AddI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.AddI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.AddF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.AddF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // TODO: check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            op = BinaryOp.SubI32;\n            nativeType = NativeType.I32;\n            nativeOne = module.createI32(1);\n            break;\n          }\n          case TypeKind.USIZE: // TODO: check operator overload\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            op = options.isWasm64\n              ? BinaryOp.SubI64\n              : BinaryOp.SubI32;\n            nativeType = options.nativeSizeType;\n            nativeOne = currentType.toNativeOne(module);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            op = BinaryOp.SubI64;\n            nativeType = NativeType.I64;\n            nativeOne = module.createI64(1);\n            break;\n          }\n          case TypeKind.F32: {\n            op = BinaryOp.SubF32;\n            nativeType = NativeType.F32;\n            nativeOne = module.createF32(1);\n            break;\n          }\n          case TypeKind.F64: {\n            op = BinaryOp.SubF64;\n            nativeType = NativeType.F64;\n            nativeOne = module.createF64(1);\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (contextualType == Type.void) {\n      return this.compileAssignmentWithValue(expression.operand,\n        module.createBinary(op,\n          getValue,\n          nativeOne\n        ),\n        false\n      );\n    }\n\n    // otherwise use a temp local for the intermediate value (always possibly overflows)\n    var tempLocal = currentFunction.getTempLocal(currentType, false);\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      module.createBinary(op,\n        this.module.createGetLocal(tempLocal.index, nativeType),\n        nativeOne\n      ),\n      false\n    );\n    this.currentType = assert(tempLocal).type;\n    currentFunction.freeTempLocal(<Local>tempLocal);\n\n    var localIndex = (<Local>tempLocal).index;\n    return module.createBlock(null, [\n      module.createSetLocal(localIndex, getValue),\n      setValue,\n      module.createGetLocal(localIndex, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFunction.flow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0x1)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation expression for an instance of the specified class. */\n  makeAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    var module = this.module;\n    var currentFunction = this.currentFunction;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    // allocate the necessary memory and tee the pointer to a temp. local for reuse\n    var tempLocal = currentFunction.getTempLocal(classInstance.type, false);\n    var initializers = new Array<ExpressionRef>();\n    initializers.push(\n      module.createSetLocal(tempLocal.index,\n        compileAllocate(this, classInstance, reportNode)\n      )\n    );\n\n    // apply field initializers\n    if (classInstance.members) {\n      for (let member of classInstance.members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let field = <Field>member;\n          let fieldType = field.type;\n          let nativeFieldType = fieldType.toNativeType();\n          let fieldDeclaration = field.prototype.declaration;\n          assert(!field.isAny(CommonFlags.CONST));\n          if (fieldDeclaration.initializer) { // use initializer\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              this.compileExpression( // reports\n                fieldDeclaration.initializer,\n                fieldType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              ),\n              nativeFieldType,\n              field.memoryOffset\n            ));\n          } else { // initialize with zero\n            // TODO: might be unnecessary if the ctor initializes the field\n            let parameterIndex = (<FieldDeclaration>field.prototype.declaration).parameterIndex;\n            initializers.push(module.createStore(fieldType.byteSize,\n              module.createGetLocal(tempLocal.index, nativeSizeType),\n              parameterIndex >= 0 // initialized via parameter\n                ? module.createGetLocal(1 + parameterIndex, nativeFieldType)\n                : fieldType.toNativeZero(module),\n                nativeFieldType,\n              field.memoryOffset\n            ));\n          }\n        }\n      }\n    }\n\n    // return `this`\n    initializers.push(\n      module.createGetLocal(tempLocal.index, nativeSizeType)\n    );\n\n    currentFunction.freeTempLocal(tempLocal);\n    this.currentType = classInstance.type;\n    return module.createBlock(null, initializers, nativeSizeType);\n  }\n\n  /** Makes a conditional allocation expression inside of the constructor of the specified class. */\n  makeConditionalAllocate(classInstance: Class, reportNode: Node): ExpressionRef {\n    // requires that `this` is the first local\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    this.currentType = classInstance.type;\n    return module.createIf(\n      nativeSizeType == NativeType.I64\n        ? module.createBinary(\n            BinaryOp.NeI64,\n            module.createGetLocal(0, NativeType.I64),\n            module.createI64(0)\n          )\n        : module.createGetLocal(0, NativeType.I32),\n      module.createGetLocal(0, nativeSizeType),\n      module.createTeeLocal(0,\n        this.makeAllocate(classInstance, reportNode)\n      )\n    );\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var currentFunction = this.currentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    currentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement,\n  parentElement: Element | null = null\n): void {\n  mangleImportName_moduleName = parentElement ? parentElement.simpleName : declaration.range.source.simplePath;\n  mangleImportName_elementName = element.simpleName;\n\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    default: return \"\";\n  }\n}\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  FlowFlags,\n\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionTarget,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  DecoratorFlags,\n  FieldPrototype,\n  Field\n} from \"./program\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString\n} from \"./types\";\n\nimport {\n  PATH_DELIMITER,\n  INSTANCE_DELIMITER,\n  CommonFlags\n} from \"./common\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    node: CommonTypeNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signatures specifically\n    if (node.kind == NodeKind.SIGNATURE) {\n      let signature = this.resolveSignature(<SignatureNode>node, contextualTypeArguments, reportMode);\n      if (!signature) return null;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var simpleName = typeNode.name.text;\n    var globalName = simpleName;\n    var localName = typeNode.range.source.internalPath + PATH_DELIMITER + simpleName; // TODO cache\n\n    // check file-global / program-global enum or class\n    {\n      let elementsLookup = this.program.elementsLookup;\n      let element: Element | null;\n      if (\n        (element = elementsLookup.get(localName)) || // file-global\n        (element = elementsLookup.get(globalName))   // program-global\n      ) {\n        switch (element.kind) {\n          case ElementKind.ENUM: {\n            if (typeNode.typeArguments !== null && typeNode.typeArguments.length) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_generic,\n                  node.range, element.internalName\n                );\n              }\n              return null;\n            }\n            return Type.i32;\n          }\n          case ElementKind.CLASS_PROTOTYPE: {\n            let instance = this.resolveClassInclTypeArguments(\n              <ClassPrototype>element,\n              typeNode.typeArguments,\n              contextualTypeArguments,\n              node\n            ); // reports\n            if (!instance) return null;\n            return node.isNullable ? instance.type.asNullable() : instance.type;\n          }\n        }\n      }\n    }\n\n    // check (global) type alias\n    {\n      let alias = this.program.typeAliases.get(simpleName);\n      if (alias) return this.resolveType(alias.type, contextualTypeArguments, reportMode);\n    }\n\n    // resolve parameters\n    {\n      let typeArgumentNodes = typeNode.typeArguments;\n      if (typeArgumentNodes) {\n        let numTypeArguments = typeArgumentNodes.length;\n        let paramTypes = new Array<Type>(numTypeArguments);\n        for (let i = 0; i < numTypeArguments; ++i) {\n          let paramType = this.resolveType( // reports\n            typeArgumentNodes[i],\n            contextualTypeArguments,\n            reportMode\n          );\n          if (!paramType) return null;\n          paramTypes[i] = paramType;\n        }\n        if (numTypeArguments) { // can't be a placeholder if it has parameters\n          let instanceKey = typesToString(paramTypes);\n          if (instanceKey.length) {\n            localName += \"<\" + instanceKey + \">\";\n            globalName += \"<\" + instanceKey + \">\";\n          }\n        } else if (contextualTypeArguments) {\n          let placeholderType = contextualTypeArguments.get(globalName);\n          if (placeholderType) return placeholderType;\n        }\n      }\n    }\n\n    // check file-global / program-global type\n    {\n      let typesLookup = this.program.typesLookup;\n      let type: Type | null;\n      if (\n        (type = typesLookup.get(localName)) ||\n        (type = typesLookup.get(globalName))\n      ) {\n        return type;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, globalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link SignatureNode} to a concrete {@link Signature}. */\n  resolveSignature(\n    node: SignatureNode,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Signature | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(explicitThisType, contextualTypeArguments, reportMode);\n      if (!thisType) return null;\n    }\n    var parameterTypeNodes = node.parameters;\n    var numParameters = parameterTypeNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterTypeNode = parameterTypeNodes[i];\n      switch (parameterTypeNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterType = this.resolveType(\n        assert(parameterTypeNode.type),\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterTypeNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (returnTypeNode) {\n      returnType = this.resolveType(returnTypeNode, contextualTypeArguments, reportMode);\n      if (!returnType) return null;\n    } else {\n      returnType = Type.void;\n    }\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return signature;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    typeParameters: TypeParameterNode[],\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var parameterCount = typeParameters.length;\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (parameterCount != argumentCount) {\n      if (argumentCount) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          Range.join(\n            (<TypeNode[]>typeArgumentNodes)[0].range,\n            (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n          ),\n          parameterCount.toString(10), argumentCount.toString(10)\n        );\n      } else if (alternativeReportNode) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          alternativeReportNode.range.atEnd, parameterCount.toString(10), \"0\"\n        );\n      }\n      return null;\n    }\n    var typeArguments = new Array<Type>(parameterCount);\n    for (let i = 0; i < parameterCount; ++i) {\n      let type = this.resolveType( // reports\n        (<TypeNode[]>typeArgumentNodes)[i],\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      // TODO: check extendsType\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the element it refers to. */\n  resolveIdentifier(\n    identifier: IdentifierExpression,\n    context: Element | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n\n    if (context) {\n\n      switch (context.kind) {\n        case ElementKind.FUNCTION: { // search locals, use prototype\n          element = (<Function>context).flow.getScopedLocal(name);\n          if (element) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n          context = (<Function>context).prototype.parent;\n          break;\n        }\n        case ElementKind.CLASS: { // use prototype\n          context = (<Class>context).prototype.parent;\n          break;\n        }\n      }\n\n      // search context\n      while (context) {\n        let members = context.members;\n        if (members) {\n          if (element = members.get(name)) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return element;\n          }\n        }\n        context = context.parent;\n      }\n    }\n\n    // search current file\n    var elementsLookup = this.program.elementsLookup;\n    if (element = elementsLookup.get(identifier.range.source.internalPath + PATH_DELIMITER + name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    // search global scope\n    if (element = elementsLookup.get(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element; // GLOBAL, FUNCTION_PROTOTYPE, CLASS_PROTOTYPE\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access to the element it refers to. */\n  resolvePropertyAccess(\n    propertyAccess: PropertyAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // start by resolving the lhs target (expression before the last dot)\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode); // reports\n    if (!target) return null;\n\n    // at this point we know exactly what the target is, so look up the element within\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to the class type they reference first\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = this.resolveFunction(\n          assert((<Property>target).getterPrototype),\n          null,\n          null,\n          reportMode\n        );\n        if (!getter) return null;\n        let classReference = getter.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getter.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          let member: Element | null;\n          if (members && (member = members.get(propertyName))) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members) {\n          let member = members.get(propertyName);\n          if (member) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return member; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n          }\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  resolveElementAccess(\n    elementAccess: ElementAccessExpression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: { // element access on element access\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        if (target = returnType.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  resolveExpression(\n    expression: Expression,\n    contextualFunction: Function,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) {\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        let type = this.resolveType(\n          (<AssertionExpression>expression).toType,\n          contextualFunction.flow.contextualTypeArguments,\n          reportMode\n        );\n        if (type) {\n          let classType = type.classReference;\n          if (classType) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return classType;\n          }\n        }\n        return null;\n      }\n      case NodeKind.BINARY: { // TODO: string concatenation, mostly\n        throw new Error(\"not implemented\");\n      }\n      case NodeKind.THIS: { // -> Class / ClassPrototype\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"this\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.SUPER: { // -> Class\n        if (contextualFunction.flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let explicitLocal = contextualFunction.flow.getScopedLocal(\"super\");\n          if (explicitLocal) {\n            this.currentThisExpression = null;\n            this.currentElementExpression = null;\n            return explicitLocal;\n          }\n        }\n        let parent = contextualFunction.parent;\n        if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n          this.currentThisExpression = null;\n          this.currentElementExpression = null;\n          return parent;\n        }\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n            expression.range\n          );\n        }\n        return null;\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(<IdentifierExpression>expression, contextualFunction, reportMode);\n      }\n      case NodeKind.LITERAL: {\n        switch ((<LiteralExpression>expression).literalKind) {\n          case LiteralKind.STRING: {\n            this.currentThisExpression = expression;\n            this.currentElementExpression = null;\n            return this.program.stringInstance;\n          }\n          // case LiteralKind.ARRAY: // TODO\n        }\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccess(\n          <PropertyAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccess(\n          <ElementAccessExpression>expression,\n          contextualFunction,\n          reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        let targetExpression = (<CallExpression>expression).expression;\n        let target = this.resolveExpression(targetExpression, contextualFunction, reportMode);\n        if (!target) return null;\n        if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n          let instance = this.resolveFunctionInclTypeArguments(\n            <FunctionPrototype>target,\n            (<CallExpression>expression).typeArguments,\n            contextualFunction.flow.contextualTypeArguments,\n            expression,\n            reportMode\n          );\n          if (!instance) return null;\n          let returnType = instance.signature.returnType;\n          let classType = returnType.classReference;\n          if (classType) {\n            // reuse resolvedThisExpression (might be property access)\n            // reuse resolvedElementExpression (might be element access)\n            return classType;\n          } else {\n            let signature = returnType.signatureReference;\n            if (signature) {\n              let functionTarget = signature.cachedFunctionTarget;\n              if (!functionTarget) {\n                functionTarget = new FunctionTarget(this.program, signature);\n                signature.cachedFunctionTarget = functionTarget;\n              }\n              // reuse resolvedThisExpression (might be property access)\n              // reuse resolvedElementExpression (might be element access)\n              return functionTarget;\n            }\n          }\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n              targetExpression.range, target.internalName\n            );\n          }\n          return null;\n        }\n        break;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype to an instance using the specified concrete type arguments. */\n  resolveFunction(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    var declaration = prototype.declaration;\n    var isInstance = prototype.is(CommonFlags.INSTANCE);\n    var classPrototype = prototype.classPrototype;\n\n    // inherit contextual type arguments as provided. might be overridden.\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(\n          inheritedName,\n          inheritedType\n        );\n      }\n    }\n\n    // override with class type arguments if a partially resolved instance method\n    var classTypeArguments = prototype.classTypeArguments;\n    if (classTypeArguments) { // set only if partially resolved\n      assert(prototype.is(CommonFlags.INSTANCE));\n      let classDeclaration = assert(classPrototype).declaration;\n      let classTypeParameters = classDeclaration.typeParameters;\n      let numClassTypeParameters = classTypeParameters.length;\n      assert(numClassTypeParameters == classTypeArguments.length);\n      for (let i = 0; i < numClassTypeParameters; ++i) {\n        contextualTypeArguments.set(\n          classTypeParameters[i].name.text,\n          classTypeArguments[i]\n        );\n      }\n    } else {\n      assert(!classTypeArguments);\n    }\n\n    // override with function specific type arguments\n    var signatureNode = declaration.signature;\n    var functionTypeParameters = declaration.typeParameters;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(functionTypeParameters && numFunctionTypeArguments == functionTypeParameters.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>functionTypeParameters)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!functionTypeParameters || functionTypeParameters.length == 0);\n    }\n\n    // resolve class if an instance method\n    var classInstance: Class | null = null;\n    var thisType: Type | null = null;\n    if (isInstance) {\n      classInstance = this.resolveClass(\n        assert(classPrototype),\n        classTypeArguments,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!classInstance) return null;\n      thisType = classInstance.type;\n      contextualTypeArguments.set(\"this\", thisType);\n    }\n\n    // resolve signature node\n    var signatureParameters = signatureNode.parameters;\n    var signatureParameterCount = signatureParameters.length;\n    var parameterTypes = new Array<Type>(signatureParameterCount);\n    var parameterNames = new Array<string>(signatureParameterCount);\n    var requiredParameters = 0;\n    for (let i = 0; i < signatureParameterCount; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(typeNode, contextualTypeArguments, reportMode);\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var internalName = prototype.internalName;\n    if (instanceKey.length) internalName += \"<\" + instanceKey + \">\";\n    instance = new Function(\n      prototype,\n      internalName,\n      signature,\n      classInstance\n        ? classInstance\n        : classPrototype,\n      contextualTypeArguments\n    );\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototype partially by applying the specified type arguments. */\n  resolveFunctionPartially(\n    prototype: FunctionPrototype,\n    typeArguments: Type[] | null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): FunctionPrototype | null {\n    assert(prototype.is(CommonFlags.INSTANCE));\n    var classPrototype = assert(prototype.classPrototype);\n\n    if (!(typeArguments && typeArguments.length)) return prototype; // no need to clone\n\n    var simpleName = prototype.simpleName;\n    var partialKey = typesToString(typeArguments);\n    var partialPrototype = new FunctionPrototype(\n      this.program,\n      simpleName,\n      classPrototype.internalName + \"<\" + partialKey + \">\" + INSTANCE_DELIMITER + simpleName,\n      prototype.declaration,\n      classPrototype,\n      prototype.decoratorFlags\n    );\n    partialPrototype.flags = prototype.flags;\n    partialPrototype.operatorKind = prototype.operatorKind;\n    partialPrototype.classTypeArguments = typeArguments;\n    return partialPrototype;\n  }\n\n  /** Resolves a function prototype to an instance by first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    prototype: FunctionPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var resolvedTypeArguments: Type[] | null = null;\n    if (prototype.is(CommonFlags.GENERIC)) {\n      assert(typeArgumentNodes != null && typeArgumentNodes.length != 0);\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.declaration.typeParameters),\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n    }\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    prototype: ClassPrototype,\n    typeArguments: Type[] | null,\n    contextualTypeArguments: Map<string,Type> | null = null,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.instances.get(instanceKey);\n    if (instance) return instance;\n\n    // Copy contextual type arguments so we don't pollute the original map\n    var inheritedTypeArguments = contextualTypeArguments;\n    contextualTypeArguments = new Map();\n    if (inheritedTypeArguments) {\n      for (let [inheritedName, inheritedType] of inheritedTypeArguments) {\n        contextualTypeArguments.set(inheritedName, inheritedType);\n      }\n    }\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    var declaration = prototype.declaration;\n    if (typeArguments) {\n      let typeParameters = declaration.typeParameters;\n      let expectedTypeArguments = typeParameters.length;\n      let actualTypeArguments = typeArguments.length;\n      assert(actualTypeArguments == expectedTypeArguments);\n      for (let i = 0; i < actualTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n      }\n    } else {\n      assert(declaration.typeParameters.length == 0);\n    }\n\n    // Resolve base class if applicable\n    var baseClass: Class | null = null;\n    if (declaration.extendsType) {\n      let baseClassType = this.resolveType(\n        declaration.extendsType,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!baseClassType) return null;\n      if (!(baseClass = baseClassType.classReference)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.A_class_may_only_extend_another_class,\n            declaration.extendsType.range\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.SEALED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            declaration.extendsType.range, baseClass.internalName\n          );\n        }\n        return null;\n      }\n      if (baseClass.hasDecorator(DecoratorFlags.UNMANAGED) != prototype.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.program.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(declaration.name.range, declaration.extendsType.range)\n          );\n        }\n        return null;\n      }\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var simpleName = prototype.simpleName;\n    var internalName = prototype.internalName;\n    if (instanceKey.length) {\n      simpleName += \"<\" + instanceKey + \">\";\n      internalName += \"<\" + instanceKey + \">\";\n    }\n    instance = new Class(prototype, simpleName, internalName, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.instances.set(instanceKey, instance);\n    this.program.instancesLookup.set(internalName, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      if (baseClass.members) {\n        if (!instance.members) instance.members = new Map();\n        for (let inheritedMember of baseClass.members.values()) {\n          instance.members.set(inheritedMember.simpleName, inheritedMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve constructor by first applying the class type arguments\n    if (prototype.constructorPrototype) {\n      let constructorPartial = this.resolveFunctionPartially(\n        prototype.constructorPrototype,\n        typeArguments,\n        reportMode\n      );\n      if (!constructorPartial) return null;\n      instance.constructorInstance = this.resolveFunction(constructorPartial, null, null, reportMode);\n    }\n\n    // Resolve instance members\n    if (prototype.instanceMembers) {\n      for (let member of prototype.instanceMembers.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let fieldDeclaration = (<FieldPrototype>member).declaration;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields\n            if (!fieldDeclaration.type) {\n              if (baseClass !== null && baseClass.members !== null) {\n                let baseField = baseClass.members.get((<FieldPrototype>member).simpleName);\n                if (baseField && !baseField.is(CommonFlags.PRIVATE)) {\n                  assert(baseField.kind == ElementKind.FIELD);\n                  fieldType = (<Field>baseField).type;\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    fieldDeclaration.name.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldDeclaration.type,\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break;\n            let fieldInstance = new Field(\n              <FieldPrototype>member,\n              internalName + INSTANCE_DELIMITER + (<FieldPrototype>member).simpleName,\n              fieldType,\n              fieldDeclaration,\n              instance\n            );\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.members.set(member.simpleName, fieldInstance);\n            break;\n          }\n\n          // Partially resolve methods as these might have type arguments on their own\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (!instance.members) instance.members = new Map();\n            let partialPrototype = this.resolveFunctionPartially(\n              <FunctionPrototype>member,\n              typeArguments,\n              reportMode\n            );\n            if (!partialPrototype) return null;\n            partialPrototype.internalName = internalName + INSTANCE_DELIMITER + partialPrototype.simpleName;\n            instance.members.set(member.simpleName, partialPrototype);\n            break;\n          }\n\n          // Clone properties and partially resolve the wrapped accessors for consistence with other methods\n          case ElementKind.PROPERTY: {\n            if (!instance.members) instance.members = new Map();\n            let getterPrototype = assert((<Property>member).getterPrototype); // must be present\n            let setterPrototype = (<Property>member).setterPrototype;         // might be present\n            let instanceProperty = new Property(\n              this.program,\n              member.simpleName,\n              internalName + INSTANCE_DELIMITER + member.simpleName,\n              prototype\n            );\n            let partialGetterPrototype = this.resolveFunctionPartially(\n              getterPrototype,\n              typeArguments,\n              reportMode\n            );\n            if (!partialGetterPrototype) return null;\n            partialGetterPrototype\n              .internalName = internalName + INSTANCE_DELIMITER + partialGetterPrototype.simpleName;\n            instanceProperty.getterPrototype = partialGetterPrototype;\n            if (setterPrototype) {\n              let partialSetterPrototype = this.resolveFunctionPartially(\n                setterPrototype,\n                typeArguments,\n                reportMode\n              );\n              if (!partialSetterPrototype) return null;\n              partialSetterPrototype\n                .internalName = internalName + INSTANCE_DELIMITER + partialSetterPrototype.simpleName;\n              instanceProperty.setterPrototype = partialSetterPrototype;\n            }\n            instance.members.set(member.simpleName, instanceProperty);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let operatorPartial = this.resolveFunctionPartially(\n          overloadPrototype,\n          typeArguments,\n          reportMode\n        );\n        if (!operatorPartial) continue;\n        operatorInstance = this.resolveFunction(operatorPartial, null, null, reportMode);\n      } else {\n        operatorInstance = this.resolveFunction(overloadPrototype, null, null, reportMode);\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    prototype: ClassPrototype,\n    typeArgumentNodes: CommonTypeNode[] | null,\n    contextualTypeArguments: Map<string,Type> | null,\n    reportNode: Node,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let typeParameterNodes = prototype.declaration.typeParameters;\n      let expectedTypeArguments = typeParameterNodes.length;\n      assert(expectedTypeArguments > 0);\n      let actualTypeArguments = typeArgumentNodes !== null ? typeArgumentNodes.length : 0;\n      if (expectedTypeArguments != actualTypeArguments) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, expectedTypeArguments.toString(10), actualTypeArguments.toString(10)\n          );\n        }\n        return null;\n      }\n      resolvedTypeArguments = this.resolveTypeArguments(\n        typeParameterNodes,\n        typeArgumentNodes,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return new binaryen.Module(this.ref).emitText();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return new binaryen.Module(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__15__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0;\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value: 127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value: 32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value: 2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: 0, writable: false },\n  \"MAX_VALUE\": { value: 1, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"MIN_VALUE\": { value: Math.fround(-3.40282347e+38), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.40282347e+38), writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: Math.fround(1.175494351e-38), writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 16777215, writable: false },\n  \"EPSILON\": { value: Math.fround(1.19209290e-07), writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"MIN_VALUE\": { value: -1.7976931348623157e+308, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_POSITIVE_VALUE\": { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\": { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\": { value: 9007199254740991, writable: false },\n  \"EPSILON\": { value: 2.2204460492503131e-16, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isClass(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"unchecked\"] = function(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[ptr + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[ptr + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  OperatorKind,\n  FlowFlags,\n  Global,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case \"isInteger\": { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isFloat\": { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isSigned\": { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isReference\": { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      compiler.currentType = Type.bool;\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isString\": { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case \"isArray\": { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && classType.lookupOverload(OperatorKind.INDEXED_GET) !== null\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case \"isDefined\": { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(operands[0], compiler.currentFunction, ReportMode.SWALLOW);\n      return module.createI32(element ? 1 : 0);\n    }\n    case \"isConstant\": { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case \"isManaged\": { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case \"clz\": { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ctz\": { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"popcnt\": { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"rotl\": { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case \"rotr\": { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case \"abs\": { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n          ret = module.createSelect( // x > 0 ? x : 0-x\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI32, // ifFalse\n              module.createI32(0),\n              module.createGetLocal(tempLocal.index, NativeType.I32)\n            ),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              module.createI32(0)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              compiler.options.usizeType.toNativeZero(module),\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            ),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType),\n              compiler.options.usizeType.toNativeZero(module)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal.index, arg0),\n            module.createBinary(BinaryOp.SubI64,\n              module.createI64(0, 0),\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n            ),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal.index, NativeType.I64),\n              module.createI64(0, 0)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"max\": { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"min\": { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFunction.flow;\n          let tempLocal0 = compiler.currentFunction.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(Type.i64, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let tempLocal0 = compiler.currentFunction.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n          compiler.currentFunction.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"ceil\": { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"floor\": { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"copysign\": { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"nearest\": { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"reinterpret\": { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case \"sqrt\": { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"trunc\": { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case \"load\": { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case \"store\": { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case \"sizeof\": { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case \"alignof\": { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case \"offsetof\": { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case \"select\": { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        default: { // any other value type\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case \"unreachable\": { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case \"memory.size\": { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case \"memory.grow\": { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case \"memory.copy\": { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.MoveMemory, null, [ arg0, arg1, arg2 ]);\n    }\n    case \"memory.fill\": { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      throw new Error(\"not implemented\");\n      // return module.createHost(HostOp.SetMemory, null, [ arg0, arg1, arg2 ]);\n    }\n\n    // other\n\n    case \"changetype\": { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case \"assert\": { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFunction.flow;\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFunction.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case \"unchecked\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFunction.flow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case \"call_indirect\": { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n\n    // user-defined diagnostic macros\n\n    case \"ERROR\": {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case \"WARNING\": {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case \"INFO\": {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case \"i8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"i64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"isize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u8\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u16\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"u64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"usize\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"bool\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f32\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case \"f64\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n\n    // gc\n\n    case \"iterateRoots\": {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Operation_not_supported,\n    reportNode.range\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: Node\n): ExpressionRef {\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case \"i32.clz\": return deferASM(\"clz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.clz\": return deferASM(\"clz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.ctz\": return deferASM(\"ctz\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.ctz\": return deferASM(\"ctz\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.popcnt\": return deferASM(\"popcnt\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.popcnt\": return deferASM(\"popcnt\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotl\": return deferASM(\"rotl\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotl\": return deferASM(\"rotl\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"i32.rotr\": return deferASM(\"rotr\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.rotr\": return deferASM(\"rotr\", compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case \"f32.abs\": return deferASM(\"abs\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.abs\": return deferASM(\"abs\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.max\": return deferASM(\"max\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.max\": return deferASM(\"max\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.min\": return deferASM(\"min\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.min\": return deferASM(\"min\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.ceil\": return deferASM(\"ceil\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.ceil\": return deferASM(\"ceil\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.floor\": return deferASM(\"floor\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.floor\": return deferASM(\"floor\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.copysign\": return deferASM(\"copysign\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.copysign\": return deferASM(\"copysign\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.nearest\": return deferASM(\"nearest\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.nearest\": return deferASM(\"nearest\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.reinterpret_f32\": return deferASM(\"reinterpret\", compiler, Type.i32, operands, Type.f32, reportNode);\n    case \"i64.reinterpret_f64\": return deferASM(\"reinterpret\", compiler, Type.i64, operands, Type.f64, reportNode);\n    case \"f32.reinterpret_i32\": return deferASM(\"reinterpret\", compiler, Type.f32, operands, Type.i32, reportNode);\n    case \"f64.reinterpret_i64\": return deferASM(\"reinterpret\", compiler, Type.f64, operands, Type.i64, reportNode);\n\n    case \"f32.sqrt\": return deferASM(\"sqrt\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.sqrt\": return deferASM(\"sqrt\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"f32.trunc\": return deferASM(\"trunc\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.trunc\": return deferASM(\"trunc\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u32, reportNode);\n    case \"i32.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u32, reportNode);\n    case \"i32.load\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.load8_s\": return deferASM(\"load\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.load8_u\": return deferASM(\"load\", compiler, Type.u8, operands, Type.u64, reportNode);\n    case \"i64.load16_s\": return deferASM(\"load\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.load16_u\": return deferASM(\"load\", compiler, Type.u16, operands, Type.u64, reportNode);\n    case \"i64.load32_s\": return deferASM(\"load\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.load32_u\": return deferASM(\"load\", compiler, Type.u32, operands, Type.u64, reportNode);\n    case \"i64.load\": return deferASM(\"load\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.load\": return deferASM(\"load\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.load\": return deferASM(\"load\", compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case \"i32.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i32, reportNode);\n    case \"i32.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i32, reportNode);\n    case \"i32.store\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i32, reportNode);\n    case \"i64.store8\": return deferASM(\"store\", compiler, Type.i8, operands, Type.i64, reportNode);\n    case \"i64.store16\": return deferASM(\"store\", compiler, Type.i16, operands, Type.i64, reportNode);\n    case \"i64.store32\": return deferASM(\"store\", compiler, Type.i32, operands, Type.i64, reportNode);\n    case \"i64.store\": return deferASM(\"store\", compiler, Type.i64, operands, Type.i64, reportNode);\n    case \"f32.store\": return deferASM(\"store\", compiler, Type.f32, operands, Type.f32, reportNode);\n    case \"f64.store\": return deferASM(\"store\", compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: Node\n): ExpressionRef {\n  var prototype = assert(compiler.program.elementsLookup.get(name));\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles a memory allocation for an instance of the specified class. */\nexport function compileAllocate(\n  compiler: Compiler,\n  classInstance: Class,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  assert(classInstance.program == program);\n  var module = compiler.module;\n  var options = compiler.options;\n\n  // __gc_allocate(size, markFn)\n  if (program.hasGC && classInstance.type.isManaged(program)) {\n    let allocateInstance = assert(program.gcAllocateInstance);\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset),\n        module.createI32(\n          ensureGCHook(compiler, classInstance)\n        )\n      ],\n      options.nativeSizeType\n    );\n\n  // memory.allocate(size)\n  } else {\n    let allocateInstance = program.memoryAllocateInstance;\n    if (!allocateInstance) {\n      program.error(\n        DiagnosticCode.Cannot_find_name_0,\n        reportNode.range, \"memory.allocate\"\n      );\n      return module.createUnreachable();\n    }\n    if (!compiler.compileFunction(allocateInstance)) return module.createUnreachable();\n\n    compiler.currentType = classInstance.type;\n    return module.createCall(\n      allocateInstance.internalName, [\n        options.isWasm64\n          ? module.createI64(classInstance.currentMemoryOffset)\n          : module.createI32(classInstance.currentMemoryOffset)\n      ],\n      options.nativeSizeType\n    );\n  }\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringType = program.typesLookup.get(\"string\");\n  if (!stringType) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringType, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringType.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCallImport(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsLookup.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"iv\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"iv\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for internals)\n  var members = classInstance.members;\n  if (classInstance.prototype.declaration.range.source.isLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(0);\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"Iv\" : \"iv\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  functionTable[gcHookIndex] = module.addFunction(\n    classInstance.internalName + \"~gc\",\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode.DOLLAR\n      || c == CharCode._\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n\n  while (lo + 1 < hi) {\n    mid = lo + (hi - lo) / 2;\n    mid -= mid % 2;\n    if (map[mid] <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < map[mid]) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + String.fromCharCode(separator) + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport * as AST from './ast';\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noTreeShaking` option. */\nexport function setNoTreeShaking(options: Options, noTreeShaking: bool): void {\n  options.noTreeShaking = noTreeShaking;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX, CommonFlags } from \"./common\";\n\n/** Expose AST for use in custom transforms. **/\nexport { AST };\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallImport:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all exports and calls the respective handlers. */\n  walk(): void {\n    for (let moduleExport of this.program.moduleLevelExports.values()) {\n      // FIXME: doesn't honor the actual externally visible name\n      this.visitElement(moduleExport.element);\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterPrototype;\n        if (getter) this.visitFunctionInstances(getter);\n        let setter = prop.setterPrototype;\n        if (setter) this.visitFunctionInstances(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    for (let instance of element.instances.values()) {\n      if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n    }\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.simpleName);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.simpleName);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            sb.push((<EnumValue>member).constantValue.toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.prototype.declaration.name.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.simpleName);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.simpleName);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.simpleName); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.prototype.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.simpleName);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.simpleName);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          for (let instance of (<FunctionPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          for (let instance of (<ClassPrototype>member).instances.values()) {\n            if (instance.is(CommonFlags.COMPILED)) return true;\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn);\n      if (statement) {\n        statement.parent = source;\n        statements.push(statement);\n      }\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: Node | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n          break;\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n          decorators = null;\n        }\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, flags, startPos);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createThisExpression(tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createIdentifierExpression(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createIdentifierExpression(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(identifier, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createIdentifierExpression(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, flags, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    } else {\n      typeParameters = [];\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (!member) return null;\n        member.parent = declaration;\n        members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    while (tn.skip(Token.AT)) {\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) break;\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorator.range\n        );\n      }\n      decorators.push(<DecoratorNode>decorator);\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n    }\n\n    var staticStart: i32 = 0;\n    var staticEnd: i32 = 0;\n    var abstractStart: i32 = 0;\n    var abstractEnd: i32 = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) {\n        flags |= CommonFlags.GENERIC_CONTEXT;\n      }\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET | CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    if (!isConstructor && !tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var name = isConstructor\n      ? Node.createConstructorExpression(tn.range())\n      : Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            implicitFieldDeclaration.parent = parent;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (!member) return null;\n          member.parent = ns;\n          members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    startPos: i32\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, flags, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, flags, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifierName()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifierName()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // can be both\n                case Token.QUESTION:   // optional parameter or ternary\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.set(CommonFlags.QUOTED);\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.is(CommonFlags.QUOTED)) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // CallExpression?\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) return null;\n        expr = Node.createCallExpression(expr, typeArguments, args, tn.range(startPos, tn.pos)); // is again callable\n      }\n    }\n\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n          next = this.parseExpression(tn,\n            isRightAssociative(token)\n              ? nextPrecedence\n              : nextPrecedence + 1\n          );\n          if (!next) return null;\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (next.kind == NodeKind.IDENTIFIER) {\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // join\n              let propertyCall = <CallExpression>next;\n              if (propertyCall.expression.kind == NodeKind.IDENTIFIER) {\n                propertyCall.expression = Node.createPropertyAccessExpression(\n                  expr,\n                  <IdentifierExpression>propertyCall.expression,\n                  tn.range(startPos, tn.pos)\n                );\n              } else {\n                this.error(\n                  DiagnosticCode.Identifier_expected,\n                  propertyCall.expression.range\n                );\n                return null;\n              }\n              expr = propertyCall;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n"],"sourceRoot":""}